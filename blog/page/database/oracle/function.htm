## ORALCE 내장함수
  # 목차
  오라클 내장함수 
  - 단일 : 행(값) 하나만 전달받아 처리하여 결과값을 반환하는 함수
    - 문자 : UPPER, LOWER, INITCAP, CONCAT, SUBSTR, LENGTH, INSTR, LPAD, RPAD, TRIM, REPLACE 
    - 숫자 : ROUND, TRUNC, CEIL, FLOOR, MOD, POWER 
    - 날짜 : ADD_MONTHS, NEXT_DAY, TRUNC 
    - 변환 : TO_NUMBER, TO_DATE, TO_CHAR 
    - 일반 : NVL, NVL2, DECODE 
  - 그룹 : 행(값)을 여러 개 전달받아 처리하여 결과값을 반환하는 함수. >> ERP에서 많이 사용 / COUNT, MAX, MIN, SUM, AVG 
  - 분석 : OVER : 윈도우함수(그룹함수[독립가능], 순서함수[독립불가], 순위함수[독립불가] 등)에 의해 발생된 값을 제공받아 처리(분석)하여 결과 반환
    - 그룹함수들  
      - 순위 : RANK, DENSE_RANK, ROW_NUMBER 
    순서 : 정렬후 윈도우징해서 검색 / FIRST_VALUE, LAST_VALUE, LAG, LEAD

  # 단일함수 예제
<code>
  -- ㄴ 문자함수 : 숫자상수를 전달받아 처리하여 결과값을 반환하는 함수 (java String 메소드로 처리가능)
  --     UPPER(문자상수) : 전달받은 문자형 상수를 모두 대문자로 변환하여 반환하는 함수
  --     LOWER(문자상수) : 전달받은 문자형 상수를 모두 소문자로 변환하여 반환하는 함수
  SELECT ename, UPPER(ename), LOWER(ename) FROM Emp WHERE ename = USER;
  SELECT empno, ename, sal FROM Emp WHERE ename='SMITH';
  SELECT empno, ename, sal FROM Emp WHERE ename='smith'; -- 문자열상수는 대소문자를 구분하므로 결과오류
  SELECT empno, ename, sal FROM Emp WHERE UPPER(ename) = UPPER('smith');
  --          INITCAP(문자상수) : 전달받은 문자형 상수의 앞글자만 대문자 나머지는 소문자로 변환(in it caption)
  SELECT INITCAP(ename) FROM Emp;
  --          CONCAT(문자상수, 문자상수) : 두개의 문자형 상수를 결합하여 변환하는 함수 ||와 동일한 기능제공
  SELECT CONCAT(ename,INITCAP(job)) FROM Emp; 
  SELECT ename || ' : ' || job "name : job" FROM Emp;
  --          SUBSTR(문자상수, 시작위치, 갯수) : 문자형 상수에서 시작위치(INDEX)부터 갯수만큼 문자 반환
  SELECT DISTINCT INITCAP(SUBSTR(job,1,3)) FROM Emp;
  --          LENGTH(문자상수) : 문자의 갯수를 반환
  --          INSTR(문자상수,검색문자,시작위치,검색갯수) : 문장형 상수에서 검색문자를 시작위치부터 검색하여 검색갯수의 위치값(index)을 반환(없으면 0을 반환)
  SELECT empno, ename, job, INSTR(job,'MAN',7,1) FROM Emp;
  --          LPAD(문자상수, 출력자릿수, 채울문자) : 문자형 상수를 출력자릿수만큼의 길이로 오른쪽정렬하여 출력하되(왼쪽 남은자리수는 채울문자로 채워반환) // 채울문자가 숫자상수로오면 자동형변환됨.
  --          RPAD(문자상수, 출력자릿수, 채울문자) : 문자형 상수를 출력자릿수만큼의 길이로 오른쪽정렬하여 출력하되(오른쪽 남은자리수는 채울문자로 채워반환)
  SELECT LPAD(ename,10,' ') FROM Emp;
  SELECT RPAD(ename,10,' ') FROM Emp;
  SELECT RPAD(SUBSTR('930101-1122333',1,8),14,'*') AS id FROM Emp WHERE ename = USER;
  --          TRIM([READING|TRAILING] 제거문자 FROM 문자상수) : 문자상수에서 앞또는 뒤에있는 제거문자를 모두제거하고 반환
  SELECT empno, ename, job, TRIM(LEADING 'S' FROM job), TRIM(TRAILING 'N' FROM job) FROM Emp;
  --          REPLACE(str, searchStr, replaceStr) : 문자형 상수에 검색문자를 찾아 변환문자로 변환하여 반환
  SELECT empno, ename, REPLACE(JOB, 'MAN','PERSON') FROM Emp;
  --      ㄴ 숫자함수 : 숫자상수를 전달받아 처리하여 반환하는 함수 (java Math 메소드로 처리가능) 
  --          ROUND(num, 소숫점자릿수) : 소숫점자릿수만큼 반올림하여 반환 // 반올림
  SELECT 45.582, ROUND(45.582,2), ROUND(45.582,0), ROUND(45.582,-1) FROM Dual; -- Dual : 가상테이블(테이블없이 SELECT 할때사용) // 다른 dbms는 FROM 없이 SELECT 가능
  --          TRUNC(숫자상수, 소숫점자릿수) : 소숫점자릿수만큼 절삭하여 반환 // 반내림
  SELECT 45.582, TRUNC(45.582,2), TRUNC(45.582,0), TRUNC(45.582,-1) FROM Dual;
  --          CEIL(num) : 숫자형상수에서 소숫점 이하값이 존재할 경우 증가하여 정수값으로 반환 (소숫점이하 데이터가 있으면 1을 더함)
  SELECT CEIL(15.3), CEIL(-15.3) FROM Dual;
  --          FLOOR(num) : 숫자형상수에서 소숫점 이하값이 존재할 경우 감소하여 정수값으로 반환 (소숫점이하 데이터가 있으면 1을 내림)
  SELECT FLOOR(15.3), FLOOR(-15.3) FROM Dual;
  --          MOD(숫자상수, 숫자상수) 숫자상수를 나누어 나머지를 정수나 실수값 반환 (오라클에서는 %연산자가 없음)
  SELECT MOD(20, 8) FROM Dual;
  --          POWER(숫자상수, 숫자상수) : 제곱근을 계산하여 반환
  SELECT 3*3*3*3*3, POWER(3, 5) FROM Dual;
  --      ㄴ 날짜함수 : 날짜상수를 처리하여 반환하는 함수 (java Date, SimpleDateformat 메소드로 처리가능)
  --          (중요)SYSDATE : 시스템(오라클이 설치되어있는컴퓨터) 날짜와 시간정보를 제공하기 위한 키워드 
  --                          >> 자료형이 날짜형인 경우 표면적으로 'RR/MM/DD'로 표현되지만 내부적으로 날짜와 시간정보가 저장되어있음.
  SELECT SYSDATE FROM Dual;
  --          ADD_MONTHS(날짜상수,숫자상수) : 날짜형 상수에 숫자형 상수만큼의 개월수를 더함.
  SELECT ADD_MONTHS(SYSDATE, 3) FROM Dual;
  --          NEXT_DAY(날짜상수,요일) : 날짜형 상수에서 다가오는 특정요일의 날짜형상수를 반환
  --                  (오라클에 접속된 사용자환경(session)에 따라서 날짜와 시간정보를 다르게 표현)
  ALTER SESSION SET NLS_LANGUAGE = 'AMERICAN'; --세선정보변경
  SELECT NEXT_DAY(SYSDATE,'SAT') FROM Dual;
  ALTER SESSION SET NLS_LANGUAGE = 'KOREAN'; --세선정보변경
  SELECT NEXT_DAY(SYSDATE,'토') FROM Dual;
  --          TRUNC(날짜상수, 표현단위) : (트런케이트)날짜형 상수를 원하는 단위까지만 표현하며 나머지는 초기값으로 표현하여 반환
  SELECT SYSDATE, TRUNC(SYSDATE, 'MONTH'), TRUNC(SYSDATE, 'YEAR') FROM Dual;
  --          날짜형 상수는 연산가능 ex. 날짜상수+숫자상수 = 날짜상수(일 증가) // 날짜상수+숫자상수/24 = 날짜상수(시간증가) // 날짜상수-날짜상수 = 일(실수)
  SELECT SYSDATE + 5 FROM Dual; -- 5일 후
  SELECT SYSDATE + 100/24 FROM Dual; -- 100시간 후
  SELECT SYSDATE - 100/24 FROM Dual; -- 100시간 전
  SELECT empno, ename, hiredate, SYSDATE - hiredate FROM Emp WHERE ename='ALLEN';
  SELECT empno, ename, hiredate, CEIL(SYSDATE - hiredate)||'일' AS 근속일수 FROM Emp WHERE ename='ALLEN';
  --      ㄴ 변환함수* : 전달받은 상수를 원하는 자료형의 상수로 변환하여 반환
  --          TO_NUMBER(문자상수) : 문자상수를 전달받아 숫자상수로 변경 // 전달받은 문자열상수가 숫자가 아닌경우 에러발생
  SELECT TO_NUMBER('5') FROM Dual;
  SELECT empno, ename, sal FROM Emp WHERE empno=7839;
  SELECT empno, ename, sal FROM Emp WHERE empno=TO_NUMBER('7839'); --비교 칼럼의 자료형이 숫자형인데 비교값이 문자형 상수인경우 숫자형으로 변환해서 비교해야함. // 강제형변환
  SELECT empno, ename, sal FROM Emp WHERE empno='7839'; -- 비교칼럼의 자로형이 숫자형인경우 비교값이 문자열상수라면 자동으로 숫자형 상수로 변환 // 자동형변환
  SELECT empno, ename, sal 세전, sal*TO_NUMBER('0.9') 세후 FROM Emp WHERE empno = 7839;
  SELECT empno, ename, sal 세전, sal*'0.9' 세후 FROM Emp WHERE empno = 7839; -- 문자형상수를 연산할 경우 자동으로 숫자형상수로 형변환
  SELECT '10'+'20' FROM Dual;
  SELECT '10'+'AB' FROM Dual; -- Error
  --          TO_DATE(문자형상수[, pattern기호]) : 날짜형상수로 변환하여 반환
  SELECT empno, ename, hiredate FROM Emp WHERE hiredate = To_DATE('82/01/23');  -- 비교컬럼의 자료형이 날자형이고 비교대상이 문자형 상수인 경우 날짜형 상수로 변환하여 비교
  SELECT empno, ename, hiredate FROM Emp WHERE hiredate = '82/01/23'; -- 자동형변환 됨.(RR/MM/DD)
  SELECT empno, ename, hiredate FROM Emp WHERE hiredate = '1982-01-23'; -- 자동형변환 됨.(YYYY-MM-DD) // hh:mi;ss
  SELECT empno, ename, hiredate FROM Emp WHERE hiredate = '01-23/1982'; -- error
  SELECT empno, ename, hiredate FROM Emp WHERE hiredate = TO_DATE('01-23/1982','MM-DD/YYYY'); 
  SELECT empno, ename, hiredate, TO_DATE('2000-01-01','YYYY-MM-DD') - hiredate 근무일 FROM Emp WHERE empno = 7844; -- 문자형-날짜형은 연산불가
  --          TO_CHAR([숫자상수|날짜상수], 패턴기호) : 전달받은 숫자형 상수 또는 문자형 상수를 패턴기호 형식의 문자형 상수로 변환하여 반환
  --                  ** 날짜 패턴기호 : YYYY(년), RR(년), MM(월), DD(일), HH24(시), HH12(시), AM(오전), PM(오후), MI(분), SS(초)
  SELECT SYSDATE FROM Dual;
  SELECT TO_CHAR(SYSDATE, 'YYYY-MM-DD HH12 : MI : SS') FROM Dual;
  SELECT empno, ename, hiredate FROM Emp WHERE TO_CHAR(hiredate, 'YYYY') = '1981'; -- **NLS 데이터포맷에 따르므로 이렇게 해야 정확하게 년도만 뽑을수 있음
  --                  숫자 패턴기호 : 9(숫자 또는 공백), 0(숫자), L(화폐단위), $(달러) // 자리수가 모자르면 #로 표현됨
  SELECT TO_CHAR(10000000, '999,999,990'), TO_CHAR(100000000, '999,999,990'), TO_CHAR(1000000000, '999,999,990') FROM Dual;
  SELECT empno, ename, TO_CHAR(sal, '99,999') sal FROM Emp WHERE empno=7844;
  SELECT empno, ename, TO_CHAR(sal, 'L99,999') sal FROM Emp WHERE empno=7844;
  SELECT empno, ename, TO_CHAR(sal, '$99,999.00') sal FROM Emp WHERE empno=7844;
  --      ㄴ 일반함수* : 전달값이 특정 조건일 경우 처리하여, 조건에 따라 다르게 처리해서 결과 반환
  --                  NVL(컬럼,변경값) : 컬럼값이 NULL인경우 변경값으로 변환하여 반환(변경값은 자료형과 동일한 값으로 변경하지 않으면 에러발생)
  SELECT empno, ename, TO_CHAR((sal+NVL(comm, 0))*12*10000, 'L999,999,999,999') anuual FROM Emp;
  SELECT (sal+comm) FROM Emp; -- null을 곱하면 null이 됨.
  --                  NVL2(전달값, 변경값1, 변경값2) : 전달값이 NULL이 아닌경우 변경값 1로 변환하고, NULL인경우 2로 변환
  SELECT LPAD(NVL2(comm, 'NULL', 'NOT NULL'), 9, ' ') FROM Emp;
  SELECT ename, (sal+NVL(comm, 0))*12 annual FROM Emp;
  SELECT ename, NVL2(comm,(sal+comm)*12,sal*12) anuual FROM Emp;
  --                  DECODE(전달값, 비교값1, 변경값1, 비교값2, 변경값2...[기본변경값])
  --                    : 전달값을 비교값과 차례대로 비교하여 같은 경우 변경값으로 반환. 
  --                      같은 값이 없을경우 기본변경값으로 반환, 기본변경값이 생략되면 NULL반환(java로 switch와 유사) 
  SELECT ename, job FROM Emp;
  -- 직원별로 다르게 급여를 책정함.
  SELECT ename, job, sal, ROUND(DECODE(job, 'ANALYST', sal*1.1, 'CLERK', sal*1.2, 'MANAGER', sal*1.3, 'PRESIDENT', sal*1.4, 'SALESMAN', sal*1.5, sal),-1) AS 업무별급여 FROM Emp;
  SELECT empno, ename, job, sal FROM Emp;
  SELECT EMPNO,ENAME,DECODE(job,'ANALYST',sal) ANALYST
      ,DECODE(job,'CLERK',sal) CLERK,DECODE(job,'MANAGER',sal) MANAGER
      ,DECODE(job,'PRESIDENT',sal) PRESIDENT,DECODE(job,'SALESMAN',sal) SALESMAN FROM Emp;
</code>

  # 그룹함수 예제
<code>
  -- ** COUNT(전달값...) : 전달값의 갯수를 반환 >> 검색행의 갯수 반환 
  SELECT COUNT(empno) FROM Emp; -- **다른검색대상과 그룹함수는 동시에 사용할수 없음. 
  SELECT empno, COUNT(empno) FROM Emp GROUP BY empno; --error 검색행의 갯수가 다르므로 에러발생 -- 그룹함수는 한개 행만 나오므로... 
  --                                  그룹함수는 NULL이 전달될 경우 전달값으로 인식되지 않아 미처리 - NULL값은 빼고저장됨 
  SELECT COUNT(empno), COUNT(comm) FROM Emp; 
  SELECT COUNT(*) FROM Emp; --        전달값으로 *을 사용하여 모든 컬럼값으로 행의 갯수를 계산하여 반환할수 있음 
  -- * MAX(전달값) : 전달값중 최대값을 반환 
  SELECT MAX(sal) FROM Emp; 
  SELECT MAX(ename) FROM Emp; 
  SELECT MAX(hiredate) FROM Emp; -- 가장 최근에 입사일 
  -- * MIN(전달값) : 전달값중 최소값을 반환 
  SELECT MIN(sal) FROM Emp; 
  SELECT MIN(ename) FROM Emp; 
  SELECT MIN(hiredate) FROM Emp; -- 가장 오래된 입사일 
  -- * SUM(전달값) : '숫자형 상수'를 전달받아 전달값의 합계를 계산하여 반환하는 함수 
  SELECT SUM(sal) FROM Emp; 
  -- * AVG(전달값) : '숫자형 상수'를 전달받아 전달값의 평균을 계산하여 반환하는 함수 
  SELECT ROUND(AVG(sal),2) FROM Emp WHERE job = 'SALESMAN'; 
  SELECT CEIL(AVG(NVL(comm, 0))) commAvg FROM Emp; -- NVL함수를 이용하여 comm이 NULL인경우 0으로 변환하여 평균 성과급을 검색 
  SELECT COUNT(*) FROM Emp WHERE deptno = 10; 
  SELECT COUNT(*) FROM Emp WHERE deptno = 20; 
  SELECT COUNT(*) FROM Emp WHERE deptno = 30; 
  -- ** GROUP BY : '*그룹함수를 사용할 경우' 컬럼값으로 그룹을 세분화하여 검색하기 위해 사용  
  --              SELECT 그룹함수[, 검색대상],...FROM 테이블명 [WHERE...] GROUP BY 컬럼명|연산식|함수 [HAVING 연산식][ORDER BY 컬럼명|연산식|함수|위치(INDEX)|별칭[ASC|DESC]]; 
  --              GROUP BY 구문에서 사용된 그룹 지정 표현식은 검색대상으로 사용가능(권장) 
  SELECT deptno, COUNT(*) FROM Emp GROUP BY deptno; 
  SELECT job, COUNT(*) FROM Emp GROUP BY job; 
  SELECT job, MAX(sal) FROM Emp GROUP BY job; 
  SELECT job jobs, MAX(sal) FROM Emp GROUP BY job; -- GROUP BY가 포함된 질의에는 GROUP BY 뒤에 alias 사용불가 
  SELECT job, ROUND(AVG(sal),-2) FROM Emp GROUP BY job; 
  SELECT job, CEIL(AVG(sal)) FROM EMP WHERE job <> 'PRESIDENT' GROUP BY job; -- 사장 빼고검색 
  SELECT job, CEIL(AVG(sal)) salavg FROM EMP WHERE job <> 'PRESIDENT' GROUP BY job ORDER BY salavg DESC; 
  SELECT deptno, SUM(sal) as salSum FROM Emp WHERE salSum >= 9000 GROUP BY deptno; -- error WHERE은 행을 검색하기위해 조건을 검색함 
  -- HAVING : GROUP BY 절 뒤에 나옴/ group(그룹연산결과)에 조건을 줌 
  SELECT deptno, SUM(sal) FROM Emp GROUP BY deptno HAVING SUM(sal)>= 9000;  
  SELECT job, CEIL(AVG(sal)) salavg FROM EMP GROUP BY job HAVING job <> 'PRESIDENT' ORDER BY salavg DESC; -- 검색대상이 별로 없을 빠름 
</code>

  3. 분석함수 예제
<code>
  -- >> SELCET 윈도우함수 OVER([PARTITION BY 컬럼명] [ORDER BY 컬럼명] [WINDOWING]), 검색대상,... FROM 테이블명 
  -- 그룹함수 
  SELECT MAX(sal) FROM Emp; --5000 
  SELECT * FROM Emp WHERE sal = 5000; 
  SELECT empno, ename, MAX(sal) FROM Emp; -- error : MAX는 1행이 나오는 반면 empno와 ename은 여러행의 결과가 나올수 있으므로 에러 
  SELECT * FROM Emp WHERE sal = (SELECT MAX(sal) FROM Emp); -- SubQuery 
  --    그룹함수와 분석함수를 함께 사용할 경우 다른 검색대상 
  SELECT empno, ename, MAX(sal) OVER() FROM Emp;  -- 분석할수 있게 보여줌. 
  SELECT deptno, CEIL(AVG(sal)) FROM Emp GROUP BY deptno; 
  SELECT empno, ename, sal, deptno, CEIL(AVG(sal) OVER()) FROM Emp GROUP BY deptno; -- 분석함수를 사용할때에는 그룹바이 사용불가 
  SELECT empno, ename, sal, deptno, CEIL(AVG(sal) OVER(PARTITION BY deptno)) FROM Emp; -- 분석함수사용시 GROUP BY 대신 PARTITION BY를 사용 
  SELECT empno, ename, sal, SUM(sal) FROM Emp ORDER BY sal DESC; -- error 
  SELECT empno, ename, sal, SUM(sal) OVER() FROM Emp ORDER BY sal DESC; 
  SELECT empno, ename, sal, SUM(sal) OVER(ORDER BY sal DESC, ename) FROM Emp; -- WINDOW 함수를 칼럼의 순서대로 연산(값이 같을 경우 동시에 연산됨) 
  SELECT empno, ename, deptno, sal, SUM(sal) OVER(PARTITION BY deptno ORDER BY sal DESC, empno) FROM Emp; 
  -- WINDOWING : 순차적인 검색행을 기준으로 이전 또는 이후에 존재하는 행(범위)을 표현하는 기능 
  --      ROWS(행단위) | RANGE(범위), [UNBOUNDED(제한이 없음)], PRICEDING(이전) | FOLLOWING(이후) 
  SELECT empno, ename, sal, SUM(sal) OVER(ORDER BY sal DESC ROWS UNBOUNDED PRECEDING) FROM Emp; -- 검색행을 기준으로 이전에 존재하는 모든 행만을 검색 대상으로 설정 
  SELECT empno, ename, sal, SUM(sal) OVER(ORDER BY sal ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING) FROM Emp; -- 부분합계 
  SELECT empno, ename, sal, COUNT(*) OVER(ORDER BY sal RANGE BETWEEN 100 PRECEDING AND 200 FOLLOWING)-1  FROM Emp; -- 자신과 비교해서 급여(ORDER BY 기준)가 100이전 200이후 범위를 COUNT() 해서 반환(자신을 포함해서 계산하므로 -1) 
  SELECT empno, ename, sal, COUNT(*) OVER(ORDER BY sal RANGE UNBOUNDED PRECEDING)-1 FROM Emp; 
  SELECT * FROM Emp; 
  -- 순위함수 : RANK, DENSE_RANK, ROW_NUMBER - 분석함수(ORDER BY)와 같이 사용해야 되는 함수 
  SELECT empno, ename, sal FROM Emp ORDER BY sal; 
  SELECT empno, ename, sal, RANK() OVER(ORDER BY sal) FROM Emp; --순위 
  SELECT empno, ename, sal, DENSE_RANK() OVER(ORDER BY sal) FROM Emp; --밀집한순위 
  SELECT empno, ename, sal, ROW_NUMBER() OVER(ORDER BY sal) FROM Emp; --정렬후 행번호를 매김(순위) 
  -- 순서함수 : FIRST_VALUE(첫번째 검색행 컬럼값반환), LAST_VALUE(마지막 검색행 컬럼값 반환) 
  --              LAG(컬럼명, 이전행위치, 변경값) : 검색행의 이전 컬럼값을 반환(이전행이 없으면 변경값 반환)  
  --              LEAD(컬럼명, 이후행위치, 변경값) : 검색행의 이후 컬럼값을 반환(이후행이 없으면 변경값 반환)  
  SELECT empno, ename, sal, FIRST_VALUE(ename) OVER(ORDER BY sal DESC) top,  
                            LAST_VALUE(ename) OVER(ORDER BY sal DESC ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) low  
                            --LAST_VALUE(ename) OVER(ORDER BY sal DESC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) 
                            FROM Emp; 
                            
  SELECT empno, ename, sal sal, FIRST_VALUE(sal) OVER(ORDER BY sal DESC ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING), LAST_VALUE(sal) OVER(ORDER BY sal ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING) FROM Emp;
</code>

  4. Hash 함수
    * DBMS_CRYTO : 데이터 암복호화 및 인증 등에 쓰이는 해시 알고리즘을 제공하는 패키지
<code>
  --sys/sys가 해쉬함수를 사용할 수 있도록 권한 부여
  GRANT EXECUTE ON DBMS_CRYTO TO scott;
</code>
<code>
  -- window
  /$ORACLE_HOME/rdbms/admin/dbmsobtk.sql
  /$ORACLE_HOME/rdbms/admin/prvtobtk.plb
</code>
<code>
  -- linux
  @$ORACLE_HOME/rdbms/admin/dbmsobtk.sql;
  @$ORACLE_HOME/rdbms/admin/prvtobtk.plb;
</code>
<code>
  -- 권한부여
  GRANT EXECUTE ON DBMS_CRYPTO TO PUBLIC:
  GRANT EXECUTE ON DBMS_OBFUSCATION_TOOLKIT TO PUBLIC;

  SELECT DBMS_CRYPTO.HASH(to_clob('사용할 문자열'), 1) FROM Dual;
  SELECT DBMS_CRYPTO.HASH(to_clob('사용할 문자열'), 2) FROM Dual;

  SELECT DBMS_CRYPTO.HASH(to_clob('특정칼럼이름'), 2) FROM Dual;
  SELECT * FROM HASH_TEST;
  CREATE TABLE HASH_TEST (hash VARCHAR(1000), no NUMBER);
  DROP TABLE HASH_TEST PURGE;

  INSERT INTO HASH_TEST VALUES(DBMS_CRYPTO.HASH(to_clob('123456789'), 1), 123456789);
  INSERT INTO HASH_TEST VALUES(DBMS_CRYPTO.HASH(to_clob('123456789'), 1), 123456789);
  COMMIT;

  SELECT * FROM HASH_TEST;
</code>