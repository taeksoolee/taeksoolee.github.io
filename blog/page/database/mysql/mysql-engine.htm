## mysql의 ENGINE
  * 서버 엔진 : 클라이언트(또는 사용자)가 Query를 요청했을때, Query Parsing과, 스토리지 엔진에 데이터를 요청하는 작업을 수행
  * 스토리지 엔진 : 물리적 저장장치에서 데이터를 읽어오는 역할을 담당.
  * mysql의 스토리지 엔진은 'Plug in'방식이며, 기본적으로 8가지의 스토리지 엔진이 탑제 되어 있다.

  # (스토리지) 엔진 목록 보기
<code>
$ SHOW ENGINE
</code>

  # (스토리지) 엔진 플러그인의 .so 파일이 있을 경우 설치 / 삭제 명령어
<code>
$ INSTALL PLUGIN ha_example SOMNAME 'ha_example.so';

$ UNINSTALL PLUGIN ha_example;
</code>

  # 스토리지 엔진 설정 (table 생성시)
<code>
  CREATE TABLE t1 (i INT) ENGINE = INNODB;
  -- Simple table definitions can be switched from one to another.
  CREATE TABLE t2 (i INT) ENGINE = CSV;
  CREATE TABLE t3 (i INT) ENGINE = MEMORY;
</code>

  # 스토리지 엔진 비교
    ** innoDB (default) : 
      >> transaction-safe 하며, commit, rollback 데이터복구 기능을 제공하므로 데이터를 효과적으로 보호 가능
      >> row-level-locking 제공
      >> 데이터를 clustered index에 저장 (PK 기반의 query I/O의 비용 감소)
      >> FK 제약을 제공하여 데이터 무결성 보장

    ** Maria
      >> MyISAM 후속으로 개발되고 있음
      >> MyISAM에 비해 트랜젝션 기능과 비정상 종료 시 복구 기능을 추가

    ** MyISAM (5.0 이하 default)
      >> 트랜젝션 미제공
      >> table-level-locking => 멀티쓰레드 환경에서 성능 저하
      >> 텍스트전문검색(Fulltext Searching)과 지리정보 처리기능 지원 => 사용시 파티셔닝 사용 불가

    ** Archive
      >> 5.0 추가
      >> 로그수집에 적합한 엔진
      >> 데이터가 메모리상에서 압축되고 압축된 상태로 디스크에 저장되기 때문에 row-level-locking 가능
      >> 단 한번 INSERT 된 데이터는 UPDATE, DELETE 사용할 수 없음
      >> 인덱스 미지원
      >> 가공없이 사용할 원시 로그 데이터를 관리하는데 효율적
      >> 테이블 파티셔닝 지원
      >> 트랜젝션 미지원

    ** NDB (Cluster DB)
      >> MySQL Cluster를 구성할때 사용하는 스토리지 엔진
      >> 트랜젝션 지원
      >> 모든 데이터와 인덱스가 메모리에 존재해야 함
      >> 버전 6.2 부터는 디스크 테이블 스페이스를 만들어 저장 가능
      >> B-tree 인덱스와 hash index 생성 가능
      >> primary key 사용시 최상의 속도를 나타냄
      >> 온라인 백업 가능

    ** Federated
      >> 5.0 추가
      >> 다수의 물리적 데이터베이스에 대한 하느의 논리적 데이터베이스를 생성하여 사용
        ( 하나의 데이터베이스에서 다른 타겟 오브젝트로 포인터 역할 수행 )
      >> 설정을 통하여 접근. 원격 데이터 접근을 위한 특별한 미드웨어 필요하지 않음.
      >> 네트워크 요소에 따라 속도 차이 발생
    
    


<hr>
## 참고
  # [MySQL] 주요 스토리지 엔진(Storage Engine) 간단 비교 : http://asuraiv.blogspot.com/2017/07/mysql-storage-engine.html