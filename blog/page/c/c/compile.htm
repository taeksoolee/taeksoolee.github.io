## 컴파일 : compile
  # 전처리기 : '#'으로 시작하는 지시자의 지시에 따라 소스 변경
  # 컴파일러 : 고급프로그래밍 언어로 작성된 소스코드가 컴파일러에 의해 어셈블리 코드로 번역
  # 어셈블러 :어셈블리 코드를 CPU가 이해할 수 있는 바이너리 코드로 변경
  # 링커 : 프로그램 내에서 참조하는 함수나 라이버리르들을 하나로 묶는 작업
  # 실행파일 : 바이너리코드 + 라이브러리

## gcc compiler
  * gcc 기본 라이브러리 디렉토리 : /lib, /usr/lib, /usr/local/lib

  # gcc 버전 확인
<code>
$ gcc -v
$ gcc --version
</code>

# gcc 컴파일
  # 기본 컴파일
<code>
$ gcc [파일명.c] => a.out
</code>

  # 실행파일 설정
<code>
$ gcc -o [실행파일명] [파일명.c]
</code>

  # 컴파일 without 링크
<code>
$ gcc -c [파일명.c]
</code>

  # 두 개 파일 부분 컴파일 후 링크 시키고 실행
<code>
$ gcc -c [파일명1.c] [파일명2.c]
$ gcc -o [실행파일명] [파일명1.o] [파일명1.o]
</code>

  # ar options
<code>
// t : 묶음 파일의 내용을 표시하는 옵션
$ ar t [파일명.a|.so] | less
// r : 라이브러리 만들기
$ ar r [파일명.a|.so] [파일명.o]
// s : 목차를 갱신하거나 생성
$ ar rs [파일명.a|.so]
$ ar rs [파일명.a|.so] [파일명.o]
</code>

  # library 사용
<code>
$ gcc -o [실행파일명] [파일명.c] -l[라이브러리명 : lib 과 . 과 확장자명 빼고]
</code>