## hello world
  # helloWorld.c
<code>
#include<stdio.h>

int main () 
{
  printf("hello world\n");
  return 0;
}
</code>

## 확장자
  # a : 정적 라이브러리
  # so (Shared Object) : 공유 라이브러리

## Header - 헤더파일
  # <.h> : /usr/include 검색
  # ".h" : 현재 디렉토리 및 -l 옵션 선택 디렉토리 검색

  # include
<code><samp>
#define _CRT_SECURE_NO_WARNINGS
/* 해더s */
#include <stdio.h> // 표준 입출력
#include <limits.h> // 최대 최소값을 표현할수 있도록 해주는 해더
#include <stdlib.h> // 표준 라이브러리
#include <stdint.h> // 고정너비정수를 선언할 수 있게함
#include <inttype.h> // 고정너비정수 관련 매크로를제공(printf, scanf...에서 사용가능함.)
#include <float.h>  // 소수형관련 해더
#include <stdbool.h> // _Bool 자료형관련 해더
#include <complex.h> // 복소수형관련 해더 (직접만들어서 사용)
</samp></code>


## IO - input, output
  # io_char.c
<code><samp>
#define _CUR_SECURE_NO_WARNING
#include<stdio.h>
int main()
{
  int ch = 0;
  ch = getchar();
  putchar(ch);
  return 0;
}
</samp></code>

## format
  # %c : 문자 한글자
  # %d, %i : signed 10진정수
  # %u : unsigned 10진정수
  # %o : unsigned 8진정수
  # %x, %X : unsigned 16진정수
  # %p : 포인터
  # %s : 문자열
  # %a, %A : 부동 소숫점수(16진수)
  # %f : 부동소숫점수(10진수)
  # %e, %E : 부동소숫점수(e, E 표기법)
  # %g, %G : 값에 따라서 %e나 %f 사용
  # %% : %
  # %숫자 : 자리수만큼 출력
  # %.숫자f : .이하 숫자 자릿수만큼 출력 

## 매크로 macro
  * 전하지 못한 함수(scanf, fopen, strcpy 등) 사용시 나오는 경고 무시 ( VS 2005↑ )
  * VS에서는 scanf_s, fopen_s, strcpy_s 등의 사용을 권장함
  # 사용예제
<code><samp>
#include <stdio.h>
#define SUM(x,y) x+y;
#define PTF(x) printf(""#x" is...");

int main()
{
  int x = 1, y = 2;
  int z = SUM(x, y);

  printf("%d\n", z); // 3

  PTF(z); // z is...

  return 0;
}
</samp></code>

## 자료형 type : 정수(Integer)
  * signed : 음수(-) 표현가능
  * unsingned : 음수표현안함.

  # char(1byte) : ascii chart를 통해서 문자표현 (c는 문자를 표현)
    * [signed] char   / c, hhd 
    * unsingned char  / c, hhu 

  # short(2byte)
    * [signed] short [int]    / hd    
    * unsingned short [int]    / hu

  # int(2~4byte // 일반적으로 4byte를 사용)
    * [signed] int    / i, d
    * unsingned [int] / i, u

  # long(4byte)
    * [signed] long [int]    / ld    
    * unsingned long [int]    / lu

  # long long(8byte)
    * long long [int]             / lld
    * unsingned long long [int]   / llu

## 자료형 type : 실수(Floating-point-type / 부동소수점형)
  * scienttific Notation표기법 : m * 10^n(m : significand, n : exponent)
      ex) 123.45 => 12345 * 10^2(significandNumber(유효숫자) : 5개) 
                 => 1.2345*10^-2
  * 컴퓨터는 Normalized significand : 1.xxx * 2^y로 표현됨

  # float(4byte = 32bit)
  - sign(1bit)
      + exponent(8bits)
      + fraction (23bits /singnficand 중 소수점 아래부분)
      : -3.4*10^38 ~ 3.4*10^38 : 정수에 비해 많은 숫자를 표현(정밀도 .이하 6자리)
  # double(8byte)
  - sign(1bit)
      + exponent(11bits)
      + fraction (52bits /singnficand 중 소수점 아래부분)

  # logn double() ( VS compile에서는 double과 같음 / gcc compile에서는 double*3 )
    * 표현 : %f(10진수 표현법), %e(cf. 1.234e0f;) %a(16진수 표현법)
    * 한계 : roundup error : 범위가 너무 커서 연산결과가 정상적으로 출력되지않을 수 있음.
          overflow : 최대값을 넘은값을 출력하면 inf(인피니티)로 표현됨
          underflow : 최솟값보다 낮은값을 출력하면 0.xx..(subnomal : 숫자가 사라지는것)으로 표현됨.
          o : 으로 나누면 경고뜨면서 출력하면 inf(인피니티)로 표현됨

## 구조체 : struct
  # 선언 : Declear (not initialize)
<code>
struct tag_name {
  type member_1;
  type member_2;
} [var_list];

struct tag_name id;

// Member access operator
id.member_1
</code>

  # 사용예제
<code>
#include <stdio.h>

int main()
{
  struct Point {
    int x, y;
  } pt ;

  pt.x = 100;
  pt.y = 50;
  // pt.x = 100 | pt.y = 50
  printf("pt.x = %d | pt.y = %d\n", pt.x, pt.y); 
  return 0;
}
</code>
<hr />
참고 : https://jeidee.github.io/2015/04/14/c-ubuntu%EC%97%90%EC%84%9C-mysql-%EA%B0%9C%EB%B0%9C-%EC%97%B0%EA%B2%B0/