## 기본 사용방법

<code>
  npm install express
</code>

<code>
  const express = require('express');

  const app = express();

  app.get('', function() {
    // static file
    res.send('hello wolrd');
  });


  app.listen(3000, () => {
    console.log('Server is up on port 3000.')
  });
</code>

<code>
  node src/app.js
</code>

## query string

<code>
  app.get("/products", (req, res) => {
    console.log(req.query); // json 형태로 반환
    res.status(200).send(req.query);
  });
</code>


# path parameter
<code>
  app.get("/user/:id", (req, res) => {
    console.log(req.params.id);
    res.status(200).send(req.params.id);
  });
</code>


# body parsing

<code>
  npm install body-parser
</code>

<code>
  var express = require('express')();
  var bodyParser = require('body-parser');

  app.use(bodyParser().json())

  // 중첩된 객체 표현을 허용 할지 설정 (객체 안을 파싱할 수 있게 하려면 true)
  app.use(bodyParser.urlencoded({ extended: true }));

  app.post('/profile', function(req, res) => {
    console.log(req.body)
  });
</code>


# express.js built in body parser(Express v4.16.0 기준)
<code>
  var app = require('express')();

  app.use(express.json())

  app.post('/profile', function(req, res) => {
    console.log(req.body)
  });
</code>


## express - mysql

<code>
  npm install mysql --save
</code>

<code>
  const mysql = require('mysql');

  const connection = mysql.createConnection({
    host : [호스트명],
    port : [포트번호], // number
    user : [유저명],
    password: [비밀번호],
    database: [DB명],
  });

  connection.connect();

  const sql = 'select * from [테이블 명]'

  connection.query(sql, (err, rows, fields) => {
    if(err) throw err;
    console.log(rows)
  });
</code>


