## hello world
	# helloWorld.py
<code>
# -*- coding:utf-8 -*-
print('hello world')
</code>

## utf8 설정
<code>
# -*- coding:utf-8 -*-
</code>

## 삼항연산자
<code>
# if - else 이용
a = 10
b = 20
result = (a-b) if a == b else (a+b)

# and / or 이용
a = 10
b = 10
result = a == b and a-b or a+b
</code>
	# 예제
<code>
aa 가 0 이라면  1 을 취하고 아니라면 aa의 본래값
aa = 0
bb = 1 if aa == 0 else aa
print(f'{aa=} {bb=}') # aa=0 bb=1
</code>

## 자료구조
	# list : ["foo", "bar"]
	- count(원소) : 리스트 내 특정 원소가 몇 개 포함되어 있는지 반환
	- index(원소) : 리스트 내 특정 원소의 인덱스를 반환
	- append(원소) :리스트의 뒤쪽에 새로운 원소를 삽입
	- sort() : 리스트를 오름차순으로 정렬
	- extend(리스트) : 리스트의 뒤쪽에 다른 리스트를 삽입
	- insert(인덱스, 원소) : 특정한 위치(인덱스)에 원소를 삽입
	- remove(원소) : 리스트 내 특정 원소를 삭제
	- pop(인덱스) : 리스트 내 특정 인덱스의 원소를 삭제
	- reverse() : 리스트의 순서를 뒤집기

	# set  : {"foo", "bar"}

	# tuple : ("foo", "var") # 고정된 리스트, 속도면에서 list보다 유리

	# dictionary : {"key1" : "foo", "key2" : "bar"}

	* 참고사항
	len(자료구조 변수) : 원소의 갯수 반환

## magic method
  # __name__ : 현재 실행의 모듈을 가리킴
	// import module일 경우 모듈 이름이되며, main 영역일 경우 __main__이름으로 출력

	> 현재 프로세스가 main 영역일 경우 실행될 코드를 작성
<code>
if __name__ == '__main__':
    # logic ...
</code>

	# __new__ : ?

	# __repr__ : (representation) repr([객체]) 함수 호출시 호출 됨
<code>
class Test():
	def __init__(self, a):
		self.a = a

	def __repr__(self):
		return 'a is {}'.format(a)

repr(Test(1)) # a is 1
</code>

## python에서 asterisk(*)
	# * : args / 가변인자로 사용 가능
<code>
def test(*args):
	for arg in args:
		print(arg)

test(1,2,3) # 1\n2\n3\n
test([1,2,3]) # [1,2,3]
test(*[1,2,3]) # 1\n2\n3\n
</code>

# 	** : kwargs / keyword arguments
<code>
def test(**kwargs):
	for item in kwargs.items():
		print(item)

test(a=1, b=2) # (a, 1)\n(b, 2)
</code>

## python 기본 라이브러리
	# os
<code>

</code>

	# sys
<code>
import sys
sys.path
</code>

	# urllib : URL 작업을 위한 여러 모듈을 모은 패키지
<code>
import urllib
</code>

	# re : 정규식을 사용하도록 하는 라이브러리
<code>
import re

p = re.compile([정규식])
m = p.match([테스트문자열])
print(m) # 실패시 None, 성공시 match 객체 반환

if m:
	# success
else:
	# fail
</code>

	# time

	# datetime
		- timedelta : 시간 계산을 위해 사용
<code>
from datetime from timedelta datetime
</code>



## 문자열 처리하는 다양한 방법
<code>
foo = 1
bar = 2

'{foo}, {bar}'.format(foo=foo, bar=bar) # 포맷 함수 사용
f'{foo}, {bar}' # 포맷 스트링 사용
'%s, %s' % (foo, bar) # 포맷 사용
</code>