## 삼항연산자
<code>
	# if - else 이용
	a = 10
	b = 20
	result = (a-b) if a == b else (a+b)

	# and / or 이용
	a = 10
	b = 10
	result = a == b and a-b or a+b
</code>
	# 예제
<code>
	aa 가 0 이라면  1 을 취하고 아니라면 aa의 본래값
	aa = 0
	bb = 1 if aa == 0 else aa
	print(f'{aa=} {bb=}') # aa=0 bb=1
</code>

## mysql 연동 모듈
<code>
	pip install PyMySQL
</code>

<code>
	import pymysql

	# connection 생성
	db_conn = pymysql.connect(
		user={사용자명},
		passwd={비밀번호},
		host={host},
		port={port}, # 생략 가능
		db=[db 이름],
		charset='utf8', # 생략 가능
		autocommit=True, # 생략 가능 / 추천하지 않음
	)

	# cursor 생성 / pymysql.cursors.DictCursor : 일반 cursor 사용시 튜플 반환
	cusor = db_conn.cursor(pymysql.cursors.DictCursor)


	# select
	sql = [query문자열]
	cursor.execute(sql)
	result = cursor.fetchall() # 결과를 받아올때 사용 인수로 number를 넣을 경우 row의 갯수를 변경 가능

	# insert, update, delete
	sql = [insert | update | delete query 문자열]
	cursor.excute(sql)
	db_conn.commit()

	# placeholder 사용
	data = ("a", "b") # 튜플
	sql = '... where id=%s and name=%s' # 첫번째에 a, 두번째에 b 가 들어갑
	cursor.excute(sql, data)

	# executemany : 속도면에서 execute보다 월등히 빠름
	data = [['a', 'b'], ['c', 'd']]
	sql = '... where in '
	cursor.excutemany(sql, data)
	db_conn.commit()
</code>

## 자료구조
	# list : ["foo", "bar"]
	- count(원소) : 리스트 내 특정 원소가 몇 개 포함되어 있는지 반환
	- index(원소) : 리스트 내 특정 원소의 인덱스를 반환
	- append(원소) :리스트의 뒤쪽에 새로운 원소를 삽입
	- sort() : 리스트를 오름차순으로 정렬
	- extend(리스트) : 리스트의 뒤쪽에 다른 리스트를 삽입
	- insert(인덱스, 원소) : 특정한 위치(인덱스)에 원소를 삽입
	- remove(원소) : 리스트 내 특정 원소를 삭제
	- pop(인덱스) : 리스트 내 특정 인덱스의 원소를 삭제
	- reverse() : 리스트의 순서를 뒤집기

	# set  : {"foo", "bar"}

	# tuple : ("foo", "var") # 고정된 리스트, 속도면에서 list보다 유리

	# dictionary : {"key1" : "foo", "key2" : "bar"}

	* 참고사항
	len(자료구조 변수) : 원소의 갯수 반환

## 정규식
<code>
	import re

	p = re.compile([정규식])
	m = p.match([테스트문자열])
	print(m) # 실패시 None, 성공시 match 객체 반환

	if m:
		# success
	else:
		# fail
</code>

## 시간 모듈
<code>
	import time
	import ...
</code>

## magic method
  # __name__ : 현재 실행의 모듈을 가리킴
	// import module일 경우 모듈 이름이되며, main 영역일 경우 __main__이름으로 출력

	> 현재 프로세스가 main 영역일 경우 실행될 코드를 작성
<code>
if __name__ == '__main__':
    ...
</code>

	# __new__ : ?

## 키보드 컨트롤 모듈 / pyautogui
  * 참고 : https://m.blog.naver.com/PostView.nhn?blogId=engo0308&logNo=221629821989&proxyReferer=https:%2F%2Fwww.google.com%2F
<code>
	python keyboard control module
	import pynput
	
	keyboard_buttton = pynput.keyboard.Controller()
	keyboard_key = pynput.keyboard.Key

	keyboard_button.press("a"); # a를 누르는 상태로 유지
	keyboard_button.release("a"); # a를 뗸 상태로 유지

	keyboard_button.press(keyboard_key.alt); # alt를 누르는 상태로 유지
	keyboard_button.release(keyboard_key.alt); # alt를 뗸 상태로 유지
</code>


## gui 모듈 / pyautogui
  * 참고 : https://blankspace-dev.tistory.com/416
<code>
	pip install pyautogui
</code>

## 엑셀 사용 모듈 / openpyxl
<code>
	import openpyxl

	# 새로 만들기
	# workbook = openpyxl.Workbook();
	# workbook.save('test.xlsx');

	# work
	workbook = openpyxl.load_workbook('test.xlsx')

	sheet = workbook['Sheet']
	#셀 주소로 값 출력
	print(sheet['A1'].value)
	#셀 좌표로 값 출력
	# print(sheet.cell(1,2).value)
</code>

## python에서 asterisk(*)

* : args / 가변인자로 사용 가능
<code>
	def test(*args):
		for arg in args:
			print(arg)

	test(1,2,3) # 1\n2\n3\n
	test([1,2,3]) # [1,2,3]
	test(*[1,2,3]) # 1\n2\n3\n
</code>

* : kwargs / keyword arguments
<code>
	def test(**kwargs):
		for item in kwargs.items():
			print(item)
	
	test(a=1, b=2) # (a, 1)\n(b, 2)
</code>


## 내장 함수
	sys.path
<code>
	import sys
	sys.path
</code>