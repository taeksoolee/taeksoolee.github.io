## docker
  * docker는 OS 자원을 사용하므로 Root 사용자로 명령어를 입력해야 한다

## docker 에디션
  # CE - Coummunity Edition (무료)
  # EE - Enterprise Edition  (유료)

## docker-ce 다운로드 (ubuntu 20.4)
  # 의존 패키지 설치
<code>
$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
$ sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
$ sudo apt update
</code>
  # Docker 설치가능 여부 확인
<code>
$ sudo apt-cache policy docker-ce
</code>
  # docker-cli 설치
<code>
$ sudo apt install docker-ce
$ sudo docker --version
</code>

## docker 명령어
  # 이미지 검색
<code>
$ sudo docker search [이미지명]
</code>

  # 이미지 다운로드 (dockerhub로부터)
<code>
$ sudo docker pull centos:latest
</code>

  # 사용가능한 image 목록 보기
<code>
$ sudo docker images
</code>

  # 컨테이너 생성 ( + 컨테이너 접속 )
    -i (interactive) : 사용자가 입출력을 할 수 있는 상태로 함
    -t : 가상 터미널을 에뮬레이션
    -d : 컨테이너를 데몬프로세스로 실행
    -p : 포트 포워딩 시 사용
    -v --volume: 파일 공유 사용 (참고 : https://tttsss77.tistory.com/161)
    --name 
<code>
$ sudo docker run [옵션] [이미지이름 or 이미지ID] [실행할 파일]
// 사용예시
$ sudo docker run -it docker.io/centos /bin/bash
// 컨테이너 이름 설정
$ sudo docker run -it --name [생성할컨테이너명] [이미지이름 or 이미지ID] /bin/bash
// 포트포워딩 예시
$ sudo docker run -it -p [HOSTport]:[DOCKERport] [이미지이름 or 이미지ID] /bin/bash
// 파일 공유
$ sudo docker run -it -v [HOSTdirectory]:[DOCKERdirectory] [이미지이름 or 이미지ID] /bin/bash
</code>

  # 컨테이너 종료
    > ctrl + d: 메인실행파일인 쉘 종료 > 컨테이너 종료
    > ctrl+p + ctrl+q : 컨테이너가 백그라운드에 살아있는 채로 Host OS가 실행

  # 컨테이너 확인
<code>
$ sudo docker ps
// 전체 목록
$ sudo docker ps -a
</code>

  # 종료된 컨테이너 시작
<code>
$ sudo docker start [이미지이름 or 이미지ID]
</code>

  # 종료되지 않은 컨테이너 연결 (PID 1)
<code>
$ sudo docker attach [이미지이름 or 이미지ID]
</code>

  # 도커 내부 파일 실행
    * 터미널(bash, zsh 등)을 실행하면 접속 (-it 옵션 사용)
<code>
$ sudo docker exec [옵션] [실행 파일]
// bash 실행
$ sudo docker exec -it /bin/bash
</code>

  # 컨테이너 종료
<code>
$ sudo docker stop [이미지이름 or 이미지ID]
</code>

  # 컨테이너 삭제
<code>
$ sudo docker rm [이미지이름 or 이미지ID]
// -f : 강제종료 (도커 실행 중일 때 종료)
</code>

  # 컨테이너 이미지로 저장
<code>
$ sudo docker commit [컨테이너명 or 컨테이너ID] [이미지명] [선택:TAG]
</code>

  # 태그 설정 (이미지 복사 / 추가)
<code>
$ sudo docker tag [옵션] [이미지명]:[태그명] [이미지명]:[태그명]
</code>

  # push (도커허브 업데이트)
<code>
$ sudo docker push [이미지명] [DOCKER_USER_ID]/[이미지명]:[태그명]
</code>

  # docker image 파일 import
<code>
$ sudo docker load -i [이미지파일]
</code>

  # docker image 파일 export
<code>
$ sudo docker save -o [경로/이미지파일.tar] [이미지명]
</code>

  # docker container import (도커컨테이너로 추가)
<code>
$ docker import [이미지파일.tar]
</code>

  # docker container export (도커 컨테이너 파일 추출)
<code>
// 실행할 때 태그
$ docker export [컨테이너명] > [이미지파일.tar]
// 태그 지정
$ docker export [컨테이너명]:[태그] > [이미지파일.tar]
</code>

























<hr/>
## 도커 경로 설정
<code>
$ dockerd -g [경로]
</code>

## 명령어
  # 도커 버전 확인
<code>
$ docker version
</code>

2. 컨테이너 실행
<code>
$ docker run [이미지명] // 이미지명 = centos:7 || ubuntu:18.04 || ...
// 실행 예시
$ docker run --privileged -itd -p 80:8080 -p 3306:3306 -v'/share:/mnt/share' --name test ubuntu:18.04 /usr/sbin/init
$ docker run --privileged -itd --net=host -v /share:/mnt/share --name test ubuntu:18.04 /usr/sbin/init
</code>
  # opetion
    -d = 백그라운드 모드
    -p [호스트포트]:[컨테이너포트] = 호스트 포트와 컨테이너 포트 연결
    -v'[호스트경로]:[컨테이너경로]' = 호스트와 컨테이너 디렉토리 공유 (마운트)
    --name = 컨테이너 이름 설정
    --privileged = 리눅스 커널기능
    -rm = 프로세스 종료 시 컨테이너 자동 제거
    -it = 컨테이너 터미널 입력
    itd : 바로 접속안하는 옵션
    --net=host : 도커깔린 서버 네트워크 그대로
    -v : 공유폴더 경로
    /usr/sbin/init : systemctl 건드리는거

  # 컨테이너 시작 및 종료
<code>
//시작 : 
$ docker start [컨테이너명 or 컨테이너ID]
// 중지 : 
$ docker stop [컨테이너명 or 컨테이너ID]
// 재시작 : 
$ docker start [컨테이너명 or 컨테이너ID]
</code>

  # 컨테이너 목록 확인
<code>
$ docker ps
</code>
    옵션 : -a || --all = 종료된 컨테이너까지 확인

  # 컨테이너 터미널 접속 (컨테이너 실행 중 가능)
<code>
$ docker exec -it [컨테이너명 or 컨테이너ID] /bin/bash
</code>

  # 컨테이너 삭제 (컨테이너 종료 후 가능)
<code>
$ docker rm [컨테이너명 or 컨테이너ID]
</code>

  # 이미지 삭제
<code>
$ docker rmi [이미지명]
</code>



  # 이미지 파일 추출
<code>
$ docker export [컨테이너명 or 컨테이너ID] > myimage.tar
</code>

  # 추출한 이미지 파일 로드
<code>
$ docker load myimage.tar myimage
</code>

## 도커 초기설정
<code>
// CentOS 7 이미지
$ docker run -itd --name centos centos:7 /usr/sbin/init
$ yum install epel-release
$ yum install -y wget
$ yum install -y vim
$ exit
$ docker commit centos myimage
</code>
<code>
// Ubuntu 18.04 이미지
$ docker run -itd --name ubuntu ubuntu:18.04 /usr/sbin/init
$ sed -i 's/archive.ubuntu.com/ftp.daumkakao.com/g' /etc/apt/sources.list
$ apt-get update
$ apt-get dist-upgrade -y
$ apt-get install -y wget vim build-essential
$ exit
$ docker commit ubuntu myimage
</code>