* 참고 : http://www.ktword.co.kr/abbr_view.php?m_temp1=2524

1. SSH
  ㅇ TCP 보안 채널(터널링)을 형성하여, 기타 응용 프로토콜이 그 위에서 안전하게 데이터 교환
  ※ 적은 비용으로, 비교적 쉽게 구현 가능하고, 안전하여 널리 사용됨

2. SSH 주요 특징
  ㅇ `보안 통신`, `포트 포워딩(일종의 터널링)` 등의 기능을 제공
    - 암호화되지 않은 telnet,rlogin,SMTP 등에 대한 패킷 스니핑 등의 보안공격 방지
      . 例) telnet은 로그인명,암호 등 모든 정보를 평문으로 보내므로 중간자 공격에 취약

  ㅇ 클라이언트/서버 관계 존재
    - 사용자 클라이언트 및 응용 서버 사이에서 SSH 클라이언트 및 SSH 서버가 존재함
      . 설치된 두 S/W(SSH 클라이언트 및 SSH 서버) 사이에서 TCP 보안 채널이 형성됨

  ㅇ 프로토콜 및 포트 번호
    - 전송계층 프로토콜 : TCP 만 가능 (TCP 상에 보안 채널 형성됨)
    - 포트 번호 : 22 (SSH 서버에 개방되는 포트)

  ㅇ 표준 : SSH Ver.2(SSH-2) RFC 4250 ~ 4256

3. SSH 주요 기능
  ㅇ 인증(Authentication)
    - 클라이언트 인증 및 서버 인증
      . 클라이언트 및 서버 간에 보안 채널이 설정되고, 서버 인증이 된 후, 
      . 서버가 클라이언트를 인증할 수 있도록 관련 소프트웨어를 호출하게됨

  ㅇ 기밀성 유지 : 암호화(Encryption)
    - 데이터 전송 전에 암호화하여 전송
    - 암호 알고리즘 (대칭키 암호 방식의 사용을 기본으로 함) : BlowFish, 3DES, IDEA

  ㅇ 무결성(Integrity)
    - 데이터 전송 중에 중간자 공격에 의한 변경 방지를 위해, MAC 코드를 통해 구현

  ㅇ 압축(Compression)
    - 보낼 데이터를 압축 수행하고 이를 암호화하여 전송

  ㅇ 포트 포워딩(일종의 터널링)

  ㅇ 다중화
    - 클라이언트와 서버 간에 보안 채널이 형성된 후에, 
    - 클라이언트 측에서 복수의 논리 채널을 설정 가능

4. SSH 프로토콜 주요 구성
  ㅇ SSH 프로토콜 스택구조
    - SSH 인증 프로토콜 : 사용자 인증(User Authentication) 제공
    - SSH 연결 프로토콜 : 1개의  암호화된 터널을 통해 다수개의 논리채널 다중화
    - SSH 전송 프로토콜 : 인증, 기밀성, 무결성, 압축(옵션) 제공
    - SSH 응용 프로토콜 : TELNET,RLOGIN,SMTP 등

5. SSH 패킷 형
  ㅇ length  : type ~ CRC 까지의 길이
  ㅇ padding : 보안공격이 쉽지 않도록 1~8 바이트 추가
  ㅇ type    : SSH 프로토콜 패킷 유형
  ㅇ 데이터  : 운반되는 실제 데이터
  ㅇ CRC     : 오류검출

6. 키 구성
  ㅇ 호스트 키 : 공개 키(공개) 및 자신의 개인 키(미공개)의 쌍
    - 최초로 서버에 접속 시도하는 클라이언트는,
      . 해당 서버의 개인 키와 수학적 쌍을 이룬 서버의 공개 키를 서버로부터 부여 받고, 
      . 이를 저장한후, 
      . 이를 통해 데이터 교환 및 향후 접속 때 사용
    - 즉, 클라이언트는 자신의 호스트 키 DB에 향후 비교를 위해 공개된 호스트 키의 복사본을 저장하여 둠

  ㅇ 세션 키   : 서버 및 클라이언트가 협상하여 서로 공유하게된 대칭 키
    - 클라이언트는 서버의 공개 호스트 키로써 서버를 인증하고는 임의 키를 생성하고,
    - 이것(임의 키)과 서버의 공개 호스트 키로 암호화한 키를 서버로 보내면,
    - 서버는 자신의 개인 키로써 클라이언트가 암호화한 키를 해독, 클라이언트를 인증하면,
    - 세션의 나머지를 이 암호화된 키로써 클라이언트/서버 간 세션 키를 삼게된 (보안 채널)

7. [Linux/OpenSSH]  SSH 구현
  ㅇ 암호를 포함한 모든 트래픽의 암호화
    - 도청, 암호 가로채기, 세션 하이재킹 등 방지

  ㅇ 서버 데몬 : OpenSSH (서버 데몬명 : sshd)
    - 현재 대부분의 리눅스 배포판에서 OpenSSH 기본 제공

  ㅇ 클라이언트 주요 명령 
    - ssh (secure shell) : 원격시스템에 안전하게 로그인하고 쉘을 시작하게함
      .  ssh 사용자명@호스트명 => 대화형 쉘 세션 형성,원격 명령 실행 등
    - scp (secure copy)  : 로컬시스템과 원격시스템 간에 안전하게 파일을 복사함
      .  scp 소스파일명 사용자명@호스트명:타킷파일명 => 로컬→원격
      .  scp 사용자명@호스트명:소스파일명 타킷파일명 => 원격→로컬
    - sftp (secure ftp)  
      .  sftp 사용자명@호스트명
    - sshfs (secure file system) 
      .  sshfs 사용자명@호스트명 `원격 파일시스템`