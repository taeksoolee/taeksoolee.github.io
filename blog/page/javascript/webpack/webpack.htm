# 그외 번들러 : Rollup, Parcel

## webpack 사용시 기본 필요 모듈
<code>
$ npm install webpack webpack-cli
</code>


## mode
  # production
  # development

## entry: 웹팩에서 웹 자원을 변환하기 위해 필요한 최초 진입점 (자바스크립트 파일 경로)
  * 여러 집인접 사용시 array로 전달
  # @babel/polyfill 사용 : Promise 등을 사용할 수 있게 함
<code>
$ npm install @babel/polyfill
</code>
<code>
module.exports = {
  entry: ["@babel/polyfill", [entry file]],
  ...
}
</code>

## output: 웹팩에서 entry 로 찾은 모듈을 하나로 묶은 결과물을 반환할 위치
  * path.resolve(__dirname, 'dist') 사용 가능
<code>
const path = require("path");

module.exports = {
  ...,
  output: {
    path: path.resolve(__dirname + "/dist"),
    filename: "bundle.[hash].js", // hash 함수 사용 가능
  },
  ...,
}
</code>

## Loader:  JS가 아닌 다른 자원 (HTML, CSS, Image 등)를 빌드할 수 있도록 도와주는 속성
  * 웹팩은 기본적으로 JS와 JSON 만 빌드 가능
  * 파일을 해석하고 변환하는 과정에 관여
  # babel-loader : 설정시 .babelrc 파일을 읽음 (.babelrc 파일 작성 할 것)
<code>
$ npm install --save-dev babel-loader @babel/core @babel/preset-env
$ npm install --save-dev @babel/preset-react
$ npm install 
</code>
<code>
module.exports = {
  ...,
  module: {
    rules: [
      {
        test: /\.(js|jsx)$/,
        exclude: /node_modules/,
        use: "babel-loader",
      },
    ],
  },
  ...,
};
</code>
  # style-loader
  # css-loader
  # sass-loader : scss, sass
  # html-loader

## Plugin: plugin 은 웹팩의 기본적인 동작 외 추가적인 기능을 제공
  * 결과물의 형태를 바꾸는 역할
  # html-webpack-plugin : html을 결과 디렉토리에 번들링
<code>
const HtmlWebpackPlugin = require('html-webpack-plugin');

module.exports = {
  // ...
  plugins: [
    new HtmlWebpackPlugin({
      template: 'public/index.html'
      // favicon: './favicon',
    })
  ]
  // ...
}
</code>

## webpack-dev-server : webpack 개발 서버
  * Error: Cannot find module 'webpack-cli/bin/config-yargs' : 버전 이슈 발생 시
<code>
// webpack 버전 수정
"webpack": "^4.32.0",
"webpack-cli": "^3.3.0",
"webpack-dev-server": "^3.11.0"
</code>

  # 설치
<code>
$npm install --save-dev webpack-dev-server
</code>
  # webpack.config.js
<code>
const port = process.env.PORT || 3000;

module.exports = {
  ...,
  devServer: {
    host: "localhost",
    port: port,
    open: true,
    historyApiFallback: true,
  },
};
</code>
  # package.json
<code>
{
...,
"scripts": {
  "start": "webpack-dev-server",
  "build": "webpack",
  ...,
},
...
}
</code>


