## 설치
  # cdn
<code><samp>
  <!-- 개발 / developement -->
  <script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
  <!-- 상요화 / production -->
  <script src="https://cdn.jsdelivr.net/npm/vue"></script>

  <!-- es6 호환 빌드용-->
  <script type="module">
    import Vue from 'https://cdn.jsdelivr.net/npm/vue@2.6.11/dist/vue.esm.browser.js'
  </script>
</samp></code>

  # 안정화버전 설치
<code>
  $ npm install --save vue
</code>

## Vue 및 component 사용
  # global app 생성
<code>
const app = new Vue({
  data: {},
  methods: {},
  computed: {},
  watch: {},
  mounted: {},
  created: {},
  updated: {},
  ...
});
</code>


  # component 생성
<code><samp>
const mycomponent  = {
  props: {
    ...props
  }
  template: `<div>{{data}}</div>`,
  data: function() {
    return {
      ...
    }
  },
  methods: {}
  ...
}
</samp></code>

## event

  # 이벤트 수식어
  .stop : 이벤트가 다음 요소로 흐르는 것을 막는 이벤트 수식어 (event.stopPropagation()이 호출)
  .prevent : 태그의 기본 동작을 막는 이벤트 수식어 (vent.preventDefault()를 호출)
  .capture : 버블링 단계가 아닌 캡처 단계에서 이벤트 핸들러를 실행
  .self : event.target과 이벤트 핸들러를 정의한 요소가 같을 때 이벤트 핸들러를 실행하도록 하는 이벤트 수식어
  .once : 이벤트 핸들러를 단 한 번만 실행하도록 하는 이벤트 수식어
  .passive : 터치 혹은 휠 이벤트로 발생하는 스크롤 성능을 향상시키는 이벤트 수식어
          (** 더 알아보기 **)

<code><samp>
<!-- 클릭 이벤트 전파가 중단됩니다 -->
<a v-on:click.stop="doThis"></a>

<!-- 제출 이벤트가 페이지를 다시 로드 하지 않습니다 -->
<form v-on:submit.prevent="onSubmit"></form>

<!-- 수식어는 체이닝 가능합니다 -->
<a v-on:click.stop.prevent="doThat"></a>

<!-- 단순히 수식어만 사용할 수 있습니다 -->
<form v-on:submit.prevent></form>

<!-- 이벤트 리스너를 추가할 때 캡처모드를 사용합니다 -->
<!-- 즉, 내부 엘리먼트를 대상으로 하는 이벤트가 해당 엘리먼트에서 처리되기 전에 여기서 처리합니다. -->
<div v-on:click.capture="doThis">...</div>


<!-- event.target이 엘리먼트 자체인 경우에만 트리거를 처리합니다 -->
<!-- 자식 엘리먼트에서는 안됩니다 -->
<div v-on:click.self="doThat">...</div>
</samp></code>


  # event bus
<code>
// EventBus 생성
EventBus = new Vue();

// 발생 - emit
const component = new Vue {
  ...
  methods: {
    someMethod: function() {
      EventBus.$emit('use-eventbus', somedata)
    }
  }
  ...
}

// 사용 - on (off), once (한번만 사용)
const otherComponent = new Vue {
  ...
  methods: {
    someMethod: function() {
      EventBus.$on('use-eventbus', function(somdata) {
        ...
        EventBus.$off('use-eventbus') // 삭제시
      })
    }
  }
  ...
}  
</code>

  # filter
<code>
// filter 정의
var app = new Vue({
  ...
  filters: {
    myFilter: function(text) {
      return text + '!!'
    }
  },
  ...
})

// filter templage 사용
{{ 'hello world' | myFilter }} // output : hello world!!
</code>

## vue life 사이클
<img src="/blog/page/javascript/vue/vueLifecycle.png" alt="" />