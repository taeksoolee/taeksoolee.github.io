## Mixin
  * v3.x 버전에서 사용 가능
  * Vue 컴포넌트(script)를 결합해서 사용하는 방법
  * 상충되는 데이터가 있을 경우 컴포넌트에 선언된 데이터를 우선하여 병합
  * 같은 이름의 훅 함수는 모두 호출. mixin 훅이 먼저 호출.
  * method, components, directive와 같이 객체의 값을 요구하는 옵션은 같은 객체에 병합

  # mixin file 정의 (.js)
<code>
// ~/src/mixins/minxin.js
export default {
  data: function () {
    return 0
  },
  create: function () {
    this.changeValue()
  },
  methods: {
    changeValue: function () {
      this.value++
    }
  }
}
</code>

  # mixin-components 정의 (.vue file)
<code><samp>
// ~/src/components/Mixin.vue
<template>
  <div>
      Mixin Component 1
      <button @click="changeValue">btn</button>
      {{ value }}
      <MixinChild />
  </div>
</template>

<script>
import mixin from '../mixins/mixin'
import MixinChild from './MixinChild.vue'

export default {
  name: 'Mixin',
  components: {
    MixinChild
  },
  mixins: [mixin]
}
</script>

// ~/src/components/MixinChild.vue
<template>
  <div>
    Mixin Component 2
    <button @click="changeValue">btn</button>
    {{ value }}
  </div>
</template>

<script>
import mixin from '../mixins/mixin'
export default {
  name: 'MixinChild',
  mixins: [mixin]
}
</script>
</samp></code>

  # 전역 mixin 사용 (사용 지양)
    * 아래 사용자 정의 옵션 병합 전략 이용
<code>
Vue.mixin({
  create: function () {
    const myOption = this.$options.myOption
    if(myOption) {
      console.log(myOption);
    }
  }
})

Vue.app({
  myOption: 'hello world!'
}) // => hello world
</code>

  # 사용자 정의 옵션 병합 전략
    * 사용자 지정 옵션을 병합할 때 기본 옵션을 사용하면 기존 값 덮어씌움
<code>
Vue.config.optionMergeStrategies.myOption = function (toVal, fromVal) {
  // return 병합된 값
}

const strategies = Vue.config.optionMergeStrategies
strategies.myOption = strategies.methods
</code>

<img src="/blog/page/javascript/vue/optionMergeStrategies.jpg" width="50%">
optionMergeStrategies 객체


<hr />
참고 : https://webruden.tistory.com/224