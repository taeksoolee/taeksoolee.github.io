## 참고 : https://realmojo.tistory.com/109

* 일반적으로 자바스크립트에서 동적으로 UI 변경 작업이 있을시에는 UI 스레드(Queue)라는 공간에 처리 순서를 저장해놓음. 즉 단일 스레드 환경

##  Worker 객체
  * HTML5에서만 작동 (버전이 높은 브라우저와 안드로이드 4 이상)
  * 독립적으로 실행시켜 멀티쓰레드 구현 (성능향상)
  * 사용 상황
    => 매우 큰 문자열의 암호화 / 복호화
    => 복잡한 수합계산(이미지 / 비디오 처리)
    => 매우 큰 배열 처리
        (즉 로딩과 실행이 오래 걸리는 자바스크립트 파일)

  # 사용 예제
<code><samp>
  // worker.html
  <div id="container"></div>
  <button type="button," onclick="workerStart">start</button>
  <button type="button," onclick="workerEnd">end</button>

  <script>
      var w;
      function workerStart() {
        // 크롬, IE10, 파이어폭스, 오페라, 사파리
        if (typeof(Worker) !== 'undefined') {
          if(typeof(w) !== 'undefined') {
            w = new Worker('worker.js');
          }
          w.onmessage = function(response) {
            document.getElementById('container').innerHTML = response.data
          }
        } else {
          document.getElementById('container').innerHTML = 'Not Worker'
        }
      }

      function workerEnd() {
        w.terminate(); // 워커종료
        w = undefined;
      }
  </script>

  // worker.js
  var updateTime = function() {
    postMessage(new Date().toLowcaseString()) // 현재시간 반환
    setTimeout('updateTime()', 1000)
  }

  updateTime();
</samp></code>


