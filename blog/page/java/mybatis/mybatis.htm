## 퍼시스던트 프레임워크 : DB연동에 사용하는 프레임워크(DAO를 생성해주는 프레임워크)
  하이버네이트(HIBERNATE) 프레임워크 전체적인 DB연동에 가장 강력한 프레임워크 / 일반 어플리케이션에 특화
  마이바티스(MyBatis) 프레임워크 CRUD 기능사용. DB연동에 가장 강력한 프레임워크 / 특히 select 기능이 뛰어남 / 웹 어플리케이션에 특화

## 마이바티스 :  : DAO 생성을 위한 프레임워크 
  * SQL session 생성이 가장 중요 

  개발자가 지정한 SQL, 저장프로시저 그리고 몇가지 고급 매핑을 지원하는 퍼시스턴스 프레임워크
  
  마이바티스는 JDBC로 처리하는 상당부분의 코드와 파라미터 설정 및 결과 매핑을 대신해준다. 
  마이바티스는 데이터베이스 레코드에 원시타입과 Map 인터페이스 
  그리고 자바 POJO(plain old java object) 를 설정해서 매핑하기 위해 
  XML과 (어노테이션(인터페이스) / i batis에서 지원안함)을 사용할 수 있다.

## 실행 구조
  sqlSessionFactory : SQL session을 생성하는 클래스 // openSession() 메소드를 호출(Mapper file 사용)하여 DAO 생성
    >> 생성된 DAO를 이용하여 DBMS 연동하여 결과 java 타입으로 반환

  sqlSessionFactoryBuilder : sqlSessionFactory 인스턴스를 만드는 클래스

  mybatis configuration XML : sqlSessionFactoryBuilder를 생성하기 위한 환경설정 파일 (필수)

  Mapper file : SQL 명령이 저장되어있는 파일 // XML 또는 interface(어노테이션)를 이용하여 생성
    environments, mapper(namespace 생략 못함) 설정은 필수임.

## 트랜젝션 처리시
    mybatis는 auto commit 아님 / 별도로 트랜젝션을 관리 필요

## SQL
  >> 결과값 (1) >> JAVA (Wrapper Class)
  >> 결과값(다수) >> JavaBean(VO, DTO) : 매핑시 컬럼명과 필드명이 같아야 함. (다를경우 resultMap을 사용하여 수동매핑)


## mapper
  # xml mapper 와 interface mapper의 장단점
    - xml : 이클립스를 사용할 경우 자동완성 미지원 (코드가 김) / 수동매핑(조인할 때) resultMap 사용이 간단 / 동적 sql 설정할때 태그로 구현가능
      (큰 프로그램에 적합)
    - interface : 코드가 간결함 / 수동매핑(조인할 때) 설정이 많음 / 동적 sql 설정할때 provider 클래스를 만들어줘야함
      (작은 프로그램에 적합)

    - mapper.xml
      => namespace : mybatis에서는 필수 (package.class 형식으로 사용)/ ibatis에서 선택 (일반단어로 사용)
      => sql 명령에 세미콜론 생략
      => insert, delete, update는 interface mapper와 함께 사용할 경우 parametertype 생략가능(생략시 interface의 메서드 파라미터를 사용)
      => select inteface mapper와 함께 사용하더라도 resultset이나 resultmap 속성을 생략하면 안됨. sql 결과를 받을 타입을 지정 / 다른 명령은 int 값으로 반환되므로 생략가능
<code><samp>
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="site.itwill.mapper.MyMapper">
    <insert>
      insert from ...  value()
    </insert>
    <update>
      update ...
    </update>
    <delete>
    </delete>
    <select>
    </select>
</mapper>
</samp></code>



## {obj.val} 식을 접근 가능