● 인터페이스(Interface)
  - 인터페이스 : 상수필드(Constant Field) + 추상메소드(Abstract Method) 
  ※ JDK 1.8이상에서는 기본메소드(Default Method)와 정적메소드(Static Method) 선언 가능
  형식) public interface 인터페이스명 {
            자료형 변수명=값;//public static final 생략
            ...
            반환형 메소드명(매개변수,...);//public abstract 생략
            ...
        }

  - 인터페이스를 이용하여 인스턴스 생성 불가 >> 생성자가 선언되어 있지 않기 때문
  - 인터페이스는 클래스가 상속받아 사용 >> 클래스의 부모 역활 수행
  - 클래스에서 인터페이스를 상속받는 방법 >> 다중상속 가능
    형식) public class 클래스명 implements 인터페이스명,인터페이스명,... { }
    ※ 클래스는 단일상속만 가능하지만 인터페이스 다중상속 가능
  - 인터페이스를 상속받은 클래스는 반드시 인터페이스의 모든 추상메소드를 오버라이드 선언 >> 실체화 작업
  - 인터페이스를 이용하여 참조변수를 생성하고 자식인스턴스 정보를 저장하여 객체 형변환으로 접근 가능
  - 인터페이스는 기존 인터페이스 상속 가능  >> 다중상속 가능
    형식) public interface 인터페이스명 extends 인터페이스명,... { }
  - 인터페이스 존재 이유
    1) Java 프로그램 작성시 단일상속의 문제점을 보완하기 위해 인터페이스 사용
     >> 클래스의 단일상속 문제로 프로그램 작성의 어려움 발생
     ex) public class 늑대인간 extends 인간,늑대  >> 불가능
         public class 늑대인간 extends 인간 implements 늑대  >> 가능
         public class 흡혈늑대인간 extends 인간 implements 늑대,흡혈귀  >> 가능
    
    2) 작업명세서의 역활 
     >> 인터페이스를 상속받은 모든 자식클래스에 동일한 메소드 작성 규칙을 제공받아 작성
     >> 클래스 간의 결합도를 낮춰 시스템 변경에 대한 프로그램 유지보수의 효율성 증가