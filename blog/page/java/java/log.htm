## slf4j : 사용자에 로그로 활용
## log4j : 개발자에 로그로 활용 / 장치에 기록(로그)을 제공하는 프로그램
## log4j.xml 파일을 이용하여 기록 관련 정보 설정 
  # eclipse 생성 기본 spring 프로젝트의 로그 log4j.dtd는 비공개로 설정 되어있으므로 자동완성이 안됨
    - 인터넷으로 직접 가져오도록 수정
<code>
"http://loging.apache.org/log4j/1.2/apidocs/org/apache/log4j/xml/doc-files/log4j.dtd"
</code>
  # appender : 더해주는 클래스를 설정 / 직접만들수 있음
    - ConsoleAppender 로그를 콘솔에 찍음 /
    - FileAppender : 로그를 한 파일에 계속만듦
    - DailyRollingFileAppender : 매일로그를 만듦
  # param : name(:Target) 고정 / value는 스트림을 의미함.
  <code><samp>
    <param name = "Target" value="{stream}">
    <param name="File" value="app.log"}/>
  <code><samp>
  
	* layout: org.apache.log4j.PatternLayout / 직접만들수 있으나 PatternLayout 사용을 권장
		* param : name(:ConversionPattern) 고정 / pattern caractor를 지정
      - %c: 패키지가 포함된 클래스명을 기록함
        ex. %c{1} : 패키지명을 제외한 클래스명을 기록
      - %d: 날짜와 시간 기록 - {SimpleDateFormatPattern}을 이용하여 원하는 형태를 구현
        ex. %d{yyyy-MM-dd} : {년-월-일} 형식으로 날짜만 출력
      - %m : 로그 메세지 기록 (message)
      - %M : 호출 메소드며 기록 (Method)
      - %n : 엔터를 기록 / 줄바꿈을 실행
      - %p : 로그이벤트 기록
        trace : 모든 레벨일때 기록
        > debug : 디버그 레벨일때 기록
        > info : 정보를 제공하는 레벨일때 기록
        > warning : 경고 레벨일때 기록
        > error : 에러일때 기록
        > fetal : 심각한 에러일때 기록
      - %r : 처리 시간 기록
      - %t : 처리 스레드명 기록
      - %F : 파일 이름을 기록. 로그시 수행한 메소드, 라인번호가 함께 기록
      - %L : 라인 번호만 기록
      // 자릿수 설정기능
      - %p : 로그이벤트의 길이만큼 자릿수 제공
      - %자릿수p : 로그 이벤트의 최대 자릿수를 설정하여 제공(왼쪽정렬)
      - %.자릿수p : 로그 이벤트의 최소 자릿수를 설정하여 제공(왼쪽정렬)
      - %-자릿수p : 로그 이벤트의 최대 자릿수를 설정하여 제공(오른쪽정렬)
</samp></code>    
  <param name="File" value="daliy.log">
  <param name="Date" value=".yyyy-MM-dd">
</samp></code>

  # logger : 로거를 직접 지정
    - name : 로그를 작성할 패키지(클래스s)를 지정
    - default : additivity="true" : root를 상속받음
    - level : value : 로그이벤트를 설정(trace > info .. > fetal)
    - appender-ref / ref속성 : 생성한 appender를 지정
  # root : 모든 logger 엘리먼트에 Logger 정보 제공 / 이정보는 additivity="true 일 경우 상속됨
    - property : value : 로그이벤트를 설정(trace > info .. > fetal)
    - appender-ref / ref속성 : 생성한 appender를 지정
  # 로그 사용예제
<code>
public class Log4jHelloWorld { 
	private static final Logger logger  = LoggerFactory.getLogger(Log4jHelloWorld.class);  // 객체 생성
	public String hello(String name) { 
		logger.info("start"); // 객체를 통해 로그 출력
	} 
}
</code>

  # log4j.xml 작성예제
<code><samp>
<?xml version="1.0" encoding="UTF-8"?> 
<!DOCTYPE log4j:configuration PUBLIC "-//APACHE//DTD LOG4J 1.2//EN"  
	"http://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/xml/doc-files/log4j.dtd"> 
<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/"> 
	<appender name="console" class="org.apache.log4j.ConsoleAppender"> 
		<param name="Target" value="System.out" /> 
		<layout class="org.apache.log4j.PatternLayout"> 
			<param name="ConversionPattern" value="%-5p: %c - %m%n" /> 
		</layout> 
	</appender> 
	<appender name="example" class="org.apache.log4j.ConsoleAppender"> 
		<param name="Target" value="System.out" /> 
		<layout class="org.apache.log4j.PatternLayout"> 
			<param name="ConversionPattern" value="%c{1} 클래스의 %M 메소드 - %m%n" /> 
		</layout> 
	</appender> 
<!-- 매일 다른 로그를 출력 -->
	<appender name="daliyLogFile" class="org.apache.log4j.DailyRollingFileAppender"> 
		<param name="File" value="daliy.log" /> 
		<param name="DatePattern" value=".yyyy-MM-dd" /> 
		<layout class="org.apache.log4j.PatternLayout"> 
			<param name="ConversionPattern" value="[%d{HH:mm:ss}]%-5p: %c - %m%n" /> 
		</layout> 
	</appender> 
	<logger name="site.itwill00.log" additivity="false"> 
		<level value="info"/> 
		<appender-ref ref="example"/> 
		<appender-ref ref="daliyLogFile"/> 
	</logger>	 

	<logger name="site.itwill.controller" additivity="false"> 
		<appender-ref ref="console"/> 
	</logger> 
	<logger name="org.springframework.core"> 
		<level value="info" /> 
	</logger> 
	<logger name="org.springframework.beans"> 
		<level value="info" /> 
	</logger> 
	<logger name="org.springframework.context"> 
		<level value="info" /> 
	</logger> 
	<logger name="org.springframework.web"> 
		<level value="info" /> 
	</logger> 
	<root> 
		<priority value="warn" /> 
		<appender-ref ref="console" /> 
	</root> 
</log4j:configuration>
</samp></code>

## LOGBack
  # pom.xml
<code><samp>
<dependency>
    <groupId>ch.qos.logback</groupId>
    <artifactId>logback-classic</artifactId>
    <version>1.3.0</version>
</dependency>
</samp></code>


## xerces : 로그프로그램에 문제가 발생할 경우 문제를 해결하기 위한 기능 제공 / 대체적으로 인코딩 기능을 제공함.
  # pom.xml
<code><samp>
<!-- https://mvnrepository.com/artifact/xerces/xercesImpl --> 
<dependency> 
  <groupId>xerces</groupId> 
  <artifactId>xercesImpl</artifactId> 
  <version>2.12.0</version> 
</dependency>
</samp></code>

<hr />
참고 : http://logging.apache.org/log4j/1.2/apidocs
참고 : https://androphil.tistory.com/420