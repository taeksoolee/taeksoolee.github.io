## 프로그램 실행에 필요한 값을 제공하기 위한 파일 (*.properties)
	- 프로그램 실행의 동적인 값을 저장하기 위해 사용 // 코드를 변경하지 않고 실행결과를 바꿀때 사용
		(환경설정파일 : configuration file)
	- 문자열로만 value를 얻어올 수 있음(value는 String 타입으로 제공됨)
	- 한글 사용가능하나 이클립스에서 표현이 안됨(플러그인 설치해야 가능) // 실재로 값을 얻어오면 한글지원
	- # 	: 설명문을 나타냄
	-  map(key = value) 형식으로 사용 
	- 배포는 bin(class file)

## Java에서 사용방법

Properties >> extends hashTable >> implements Map

1. 입력스트림 생성 
	1)  경로를 직접입력 // 경로문제가 발생할 수 있음. (경로를 만들어주는 메소드 사용)
		FileInputStream in = new FileInputStream("bin/dbcp/user.properties"); // 배포가능
		FileInputStream in = new FileInputStream("src/dbcp/user.properties"); //  배포시오류

	2) 리플렉션  // 경로문제는 발생하지않음
		InputStream in 
		= PropertiesApp.class 	// Clazz : classInstance (bin 디렉토리)
			.getClassLoader() 	// 로드해준 로더 인스턴스를 반환
			.getResourceAsStream(String resource) // 리소스를 읽기위한 입력 스트림을 생성하여 반환 // 패키지명 포함해야함.

		InputStream in 
		= PropertiesApp.class 	// Clazz : classInstance (bin 디렉토리)
			.getResourceAsStream(String resource) // 리소스를 읽기위한 입력 스트림을 생성하여 반환 // 파일명만 함.

2. Properties 인스턴스 생성 (Map과 유사한 형식 // util 패키지에 있음)
	Properties p = new Properties();

3. Properties 파일의 정보를 읽어 Properties 인스턴스에 저장
	p.load(in); // load(inputStream)

4. key를 통하여 value값 // get은 Object 형식으로 반환되므로 명시적 객체형변환 필요
	String key = (String)p.set(key); //