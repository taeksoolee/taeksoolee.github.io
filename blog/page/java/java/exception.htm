● 예외처리
  - 예외(Exception) : 프로그램을 작성하거나 실행할 때 발생할 수 있는 오류  
  - 예외처리 : 예외가 발생된 경우 예외를 처리하기 위한 방법
  - 예외처리를 처리하는 클래스
    Throwable : 프로그램 오류에 관련된 최상위 클래스
     ├ Error : 하드웨어의 의해 발생하는 오류 처리를 위한 상위 클래스 
     └ Exception : 소프트웨어에 의해 발생하는 오류 처리하기 위한 상위 클래스 
    
  - 예외의 종류
    1) 작성 관련 예외 : 예외처리를 하지 않을 경우 컴파일 에러 발생
      >> RuntimeException 클래스를 상속받지 않는 클래스로 예외처리

    2) 실행 관련 예외 : 프로그램을 실행할 경우 예외 발생
      >> RuntimeException 클래스를 상속받아 자식클래스로 예외처리

  - 예외처리 방법 : 실행 관련 예외는 예외처리를 하지 않으면 기본적으로 JVM 자동으로 예외처리
    1) 예외가 발생될 명령이 선언된 메소드에서 예외처리
      형식) try {
               예외가 발생될수 있는 명령; ... 
            } catch(예외클래스 참조변수) {  
               예외처리명령; ...
            } finally {
               무조건 실행 명령; ...
            }
      >> try 영역에서 예외가 발생될 경우 예외 인스턴스 생성
      >> catch 영역에서 예외 인스턴스를 전달받아 예외 처리 - 프로그램 흐름 이동
      >> catch 영역은 여러 번 선언 가능
      >> finally 영역에는 예외 발생에 상관없이 무조건 실행될 명령 작성 - 생략
    2) 예외가 발생될 명령이 선언된 메소드에서 예외 전달
      >> 예외가 전달된 메소드를 호출할 경우 try 명령을 이용하여 예외처리 
      형식) 접근지정자 반환형 메소드명(파라메터,...) throws 예외클래스,예외클래스,... {
                예외 발생 명령;
            }
      >> 예외를 전달하여 한번에 예외처리 하고자 할 경우 사용
   ※ 오버라이드 선언된 메소드는 예외전달 불가능 >> try 명령으로 예외처리
   ※ JVM에게 예외를 전달할 경우 자동 예외처리
  - 개발자에 의한 예외클래스 작성 방법 : Exception 클래스를 상속 받아 작성
    형식) public class 예외클래스 extends Exception {
                public 예외클래스() { }
                
		public 예외클래스(String message) {
                  super(message);
                }
          }

  - 예외클래스를 이용하여 인위적으로 예외를 발생하는 방법
    형식) if(조건문) throw new 예외클래스(메세지);