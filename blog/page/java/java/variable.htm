● 상수와 변수
  - 상수 : 절대 변하지 않는 값
  - 변수 : 상수를 저장하기 위한 메모리에 부여한 이름
  
  형식) 자료형 변수명;
     >> 자료형 : 변수에 저장될 상수의 데이타유형 - 기본형(키워드) 또는 참조형(식별자) 
     >> 변수명 : 상수를 저장하기 위한 이름 - 식별자
     
  ※ 식별자 작성 규칙   
     - 영문자,숫자,특수문자(_ 또는 $)만 사용 가능(문자에 대한 유니코드 표현으로 인해 한글도 사용 가능)
     - 숫자로 시작해서는 안된다.
     - 영문자는 대소문자를 구분한다.
     - 이미 선언된 식별자를 다시 사용할 수 없다.(키워드 사용 불가)
     
   ex) int su;//정수형변수 su 변수 선언  
       su=10;//10을 su 변수에 저장
       System.out.println(su);//화면에 su 변수에 저장된 상수 출력	


● 자료형 => 상수를 표현하거나 변수를 선언하기 위한 키워드(기본형) 또는 식별자(참조형)
  - 기본형(Primitive Type) : 상수를 표현하거나 변수를 선언하기 위한 키워드
    >> 숫자형(정수형, 실수형, 문자형) - 연산 가능, 논리형  
  
  - 참조형(Reference Type) : 특정 대상을 표현하거나 대상에 대한 정보를 저장하는 변수를 선언하기 위한 식별자 - 클래스
    >> String 클래스 : 문자열 상수를 표현하거나 문자열 상수의 정보를 저장하기 위한 클래스
  
  1. 정수형
    1) 상수 : 소숫점을 가지고 있지 않은 숫자(4byte = -2147483648~2147483647)
       10진수 정수상수  ex) 100
       8진수 정수상수  ex) 0100
       16진수 정수상수  ex) 0x100
       long 상수  ex) 100L  >>  8byte

    2) 변수
       byte 변수명;//1byte  >> -128~127
       short 변수명;//2byte >> -32768~32767
       int 변수명;//4byte   >> -2147483648~2147483647
       long 변수명;//8byte
       
  2. 실수형
    1) 상수 : 소숫점이 1개 있는 숫자(8byte) : 부동소숫점 방식으로 표현  
      float형 실수상수   ex) 1.23F  >> 4byte
      double형 실수상수  ex) 1.23
      지수형 실수상수    ex) 1.23E-09 
      
    2) 변수
      float 변수명;//4byte(가수부 유효범위 : 7자리)
      double 변수명;//8byte(가수부 유효범위 : 15자리)
      
  3. 문자형
    1) 상수 : ' ' 안에 표현(2byte) - 정수형태로 표현(ASCII Code 또는 UniCode)
       일반문자상수  >>  ex) 'A'  '5'  '한'    
       
       제어문자(Escape Character)상수 - Java 표현할 수 없는 문자를 표현한 문자
       ex) '\n' : Enter     '\t' : Tab     '\0' : NULL문자 
           '\"' : "문자     '\'' : '문자   '\\' : \문자
            
    2) 변수 : 문자상수 및 정수상수 저장    
       char 변수명;//2byte(0~65535)
         
  4. 논리형 - 참 또는 거짓를 표현하기 위한 자료형
    1) 상수 : false 또는 true
    2) 변수 : false 또는 true만 저장 가능하며 관계식의 결과도 저장 가능
      boolean 변수명;//1byte
               
  5. 문자열 - 기본형이 아닌 참조형
    1) 상수 : " " 안에 표현 - 문자그룹 
       ex) "A"  "XYZ"   "대한민국"
       
    2) 변수 : String 클래스를 이용
       String 변수명;

● 형변환 - 자료형(기본형)을 일시적으로 변환
  1. 자동 형변환
    - 자료형이 다른 상수를 연산하기 위해 JVM(Java Virtual Machine)이 자료형을 일시적으로 변환       
    
    ex) 3 + 1.5 => int + double => int(double) + double 
        3.0 + 1.5 => 4.5(double) 
     
    - 연산을 위해 작은 자료형을 큰 자료형으로 변환
      byte < short < char < int < long < float < double
    - int 보다 작은 자료형끼리 연산하면 자동으로 int로 형변환된다.  
    
  2. 강제 형변환
    - 원하는 상수를 얻기 위해 개발자가 자료형을 강제로 변환
    형식) (자료형)대상   => Cast 연산자 이용
    
    ex) int a=5.9;//에러
        int a=(int)5.9;//int a=5;