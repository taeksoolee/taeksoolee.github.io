캡슐화(Encapsulation) : 추상화 작업을 통해 작성된 클래스를 보다 견고하게 작성
  - 필드의 직접적인 접근을 제한하고 메소드를 이용하여 접근하도록 프로그램 작성 방법
  - 인스턴스가 필드에 직접 접근하여 사용될 경우 잘못된 정보 저장 가능
    >> 인스턴스가 필드에 직접 접근하는 것을 제한 - 정보 은닉화(Information Hiding)
  - 인스턴스가 필드에 접근할 수 없도록 private이라는 접근지정자(Access Modifier)를 이용하여 선언
    형식) private 자료형 변수명;
    >> 클래스 내부의 메소드에서만 접근 가능하며 클래스 외부에서 접근할 경우 에러 발생
  - 은닉화 선언된 필드에는 필드값 반환 또는 필드값 변경 목적의 메소드 선언
    >> Getter(is) 메소드(필드값 반환)와 Setter 메소드(필드값 변경) 선언 - 캡슐화
    >> 메소드는 모든 클래스에서 접근 가능하도록 public 접근지정자를 이용하여 선언
    형식) public 반환형 메소드명(파라메터,...) {
             명령;
             ...
          }
  - Getter 메소드 : 필드값 반환 목적의 메소드
    형식) public 자료형 get필드명() {
              return 필드명;//필드값 제공
          }  
    ※ 필드 자료형이 boolean인 경우 메소드명은 "is필드명"으로 선언
    
  - Setter 메소드 : 필드값 변경 목적의 메소드
    형식) public void set필드명(자료형 파라메터명) {
              //파라메터값에 대한 유효성 검사
              필드명=파라메터명;//파라메터값으로 필드값을 변경
          }
    ※ 식별자 변경 : Refactor >> Rename (Alt+Shift+R)
       >> 빌드된 클래스의 모든 식별자가 동시에 변경
  
    ※ 이클립스에서는 Getter와 Setter 메소드를 자동으로 생성하는 기능 제공
       >> Alt+Shift+S >> R >> 필드 선택 >> Generate(OK)