● java.lang.Objetc 클래스
  - 모든 클래스가 반드시 상속 받는 최선조클래스
    >> 모든 인스턴스는 Object 클래스의 메소드 사용 가능
  - 클래스를 선언할 때 상속받는 클래스가 없을 경우 자동으로 Object 클래스 상속
  - 참조변수의 인스턴스 정보를 출력하면 Object 클래스의 toString() 메소드 자동 호출
    >> Object 클래스의 toString() 메소드를 오버라이드 선언하여 사용

● java.lang 패키지
  - 프로그램 개발에 필요한 기본적인 참조형이 선언된 패키지
  - Object 클래스, System 클래스, Math 클래스, Thread 클래스등

 1. Wrapper 클래스 : 기본형(Primitive Type)을 대신하기 위해 제공되는 클래스
    >> Character, Byte, Short, Integer, Long, Float, Double, Boolean
  - Wrapper 클래스가 제공되는 이유
    1) 객체 지향 프로그래밍(OOP)는 인스턴스를 이용하여 프로그램 작성
    2) Wrapper 클래스로 다양한 기능(메소드) 제공
   
  - JDK1.5이상에서는 Wrapper 클래스에 오토박싱과 오토언박싱 기능을 제공
    1) 오토박싱 : 상수를 사용할 경우 자동으로 인스턴스로 변환하는 기능
    2) 오토언박싱 : 인스턴스를 사용할 경우 자동으로 상수로 변환되는 기능   

 2. String 클래스와 StringBuffer 클래스 : 문자열 상수를 저장할 목적의 클래스    
  - String 클래스 : 문자열을 제어하기 위한 메소드 제공
  - StringBuffer 클래스 : 문자열의 문자를 제어하기 위한 메소드 제공 

● java.util 패키지
  - 프로그램 개발에 필요한 필수적인 참조형이 선언된 패키지
  - Arrays 클래스, Scanner 클래스, Random 클래스등
  1. Date 클래스 또는 Calendar 클래스
    - 날짜와 시간 정보를 저장할 목적의 클래스
   ※ Date 클래스는 java.text.SimpleDateFormat 클래스와 같이 사용

  2. 자료구조 클래스 : 인스턴스를 여러 개 저장하여 사용하기 위한 클래스 - 콜렉션 클래스 
    - Collection 인터페이스(Set 인터페이스, List 인터페이스, Queue 인터페이스) 또는 Map 인터페이스를 상속받아 작성된 클래스
    - 자료구조 : 정보들을 보다 효율적으로 관리(저장,변경,삭제,검색)하기 위한 기능을 제공하는 방법
    - 자료구조 클래스는 인스턴스만 저장 가능(상수 저장 불가)
    - 자료구조 클래스는 제네릭 타입이 적용된 클래스로 구현하는 것을 권장
    - 제네릭(Generic) : 참조형 작성시 필드(메소드)의 참조형 대신 사용될 식별자
      >> 제네릭 식별자에 참조형 타입을 전달해야만 참조형으로 사용 가능    

    1) Set 인터페이스를 상속받는 클래스 >> HashSet 클래스등
       - 저장 순서가 없으며 동일한 정보의 인스턴스 미저장
    
    2) List 인터페이스를 상속받는 클래스 >> ArrayList 클래스, Vector 클래스등  
       - 저장 순서가 있으며 동일한 정보의 인스턴스 저장
       - 저장요소(엘리먼트:Element)를 첨자(Index)로 구분하여 처리 가능

    3) Map 인터페이스를 상속받는 클래스 >> HashMap 클래스
       - MapKey와 MapValue를 하나의 정보로 묶어 표현 >> 엔트리(Entry)
       - MapKey를 이용하여 MapValue 검색(MapKey 미중복) >> 빠른 검색 가능

● java.awt 패키지
  - GUI 프로그램을 개발하기 위한 참조형이 선언된 패키지
  - GUI 프로그램 : 디자인(컴퍼넌트) + 이벤트 처리(리스너) >> 이벤트 프로그램
  - GUI 프로그램 작성 방법 >> 디자인
  
    1) Frame 클래스를 상속 받는 자식클래스 작성
    2) main 메소드에서 자식클래스로 인스턴스 생성
       >> 자식클래스로 인스턴스를 생성할 경우 Frame 인스턴스가 먼저 생성
    3) 자식클래스의 생성자에서 프레임의 디자인 구현
       >> 컴퍼넌트와 컨테이너 클래스를 이용하여 프레임에 담아 디자인

  - 배치관리자를 이용하여 컨테이너에 컴퍼넌트가 자동으로 부착되도록 설정
    >> 배치관리자(LayoutManager) : BorderLayout, FlowLayout, GridLayout, CardLayout, GridBagLayout 등
    >> 컨테이너는 기본적으로 배치관리자가 자동 설정
       Frame 또는 Dialog : BorderLayout       
        Panel : FlowLayout
    >> Container.setLayout(LayoutManager layout) : 컨테이너의 배치관리자를 변경하는 메소드
  
  - 컨테이너에 컴퍼넌트 부착 : add() 메소드 이용
    >> 배치관리자에 의해 컴퍼넌트가 자동으로 위치와 크기에 설정되어 부착
  - 배치관리자(LayoutManager)의 종류

    1) BorderLayout   
      >> 컴퍼넌트를 동,서,남,북,중앙 위치에 부착
      >> 반드시 add() 메소드로 부착위치를 지정 - 생략될 경우 무조건 중앙위치에 부착
     
    2) FlowLayout
      >> 컴퍼넌트를 왼쪽에서 오른쪽으로 차례대로 부착
      >> 컨테이너의 크기가 작은 경우 자동으로 아래로 컴퍼넌트가 이동되어 부착
     
    3) GridLayout 
      >> 행/열 방식으로 컴퍼넌트를 부착 
      >> GridLayout 생성자는 반드시 행갯수와 열갯수 설정
  
  - 컴퍼넌트를 여러 개를 부착하고자 할 경우 Panel 컨테이너 이용 

● GUI 프로그램에서의 이벤트 처리
  - 이벤트 : 컴퍼넌트(컨테이너)가 동작될 동작(변경)될 경우 발생되는 사건
     
  - 이벤트 처리 : 이벤트가 발생되는 것을 감지하여 처리하는 기능
  - 이벤트 처리 방법
  
    1) 디자인 클래스 작성 : 이벤트 소스 - 이벤트가 발생될 컴퍼넌트
  
    2) 이벤트 핸들러 클래스 작성 : 리스너 인터페이스를 상속받아 추상메소드 오버라이드 선언

       >> 이벤트 소스에서 발생될 이벤트를 처리하기 위해 리스너 인터페이스 제공

       >> 이벤트 소스에서 ActionEvent가 발생될 경우 ActionListener 인터페이스를 상속받아 작성
    
    3) 컴퍼넌트에서 이벤트가 발생될 경우 동작될 이벤트 핸들러 등록
    
       >> Component.addEventListener(Listener l) 메소드
    
  - Inner Class : Class(Outer Class) 안에 선언된 클래스
    >> Outer Class에서만 사용하기 위한 클래스
    >> Outer Class의 필드와 메소드 사용 가능
    >> Nested Class : Inner Class에 static 키워드를 사용하여 선언된 클래스 

  - 이벤트 프로그램 작성 방법
    1) 디자인 클래스와 이벤트 핸들러 클래스를 동일 클래스로 작성
       >> 이벤트가 발생되는 컴퍼넌트가 적을 경우
     
    2) 디자인 클래스 안에 이벤트 핸들러 클래스를 선언하여 작성
       >> 이벤트가 발생되는 컴퍼넌트가 많을 경우
     
    3) 디자인 클래스의 이벤트 소스에 직접 이벤트 핸들러를 선언하여 작성 
       >> 익명 내부 클래스를 이용하여 이벤트 처리
       >> 이벤트가 발생되는 컴퍼넌트가 적을 경우(안드로이드 프로그램)
           
  - 이벤트 핸들러 클래스를 Listener 인터페이스 대신 Adapter 클래스를 상속 받아 작성
     >> Listener 인터페이스를 상속 받아 작성할 경우 불필요한 이벤트 핸들러 메소드도 오버라이드 선언   
     >> 필요한 이벤트 핸들러 메소드만 오버라이드 선언하기 Adapter 클래스 사용
    ※ Listener 인터페이스의 추상메소드가 2개 이상인 경우에만 Adapter 클래스 제공

● javax.swing 패키지
  - GUI 프로그램을 작성하기 위해 추가된 클래스와 인터페이스의 모임
  - 자체적인 컴퍼넌트를 이용하여 프로그램이 실행되므로 모든 OS에서 동일하게 표현
  - Swing 프로그램 작성 방법
    1) Swing 컴퍼넌트(컨테이너)는 J로 시작
       ex) Frame   >>  JFrame
           Button  >>  JButton
           Choice  >>  JComboBox

    2) JFrame 컴퍼넌트의 속성 변경 불가능 >> 컴퍼넌트 부착, 배치관리자 변경, 배경색 변경
      >> JFrame 컴퍼넌트의 Container 인스턴스를 반환받아 속성 변경
      >> JFrame.getContentPane() : JFrame 컴퍼넌트의 Container 인스턴스를 반환하는 메소드
    3) 프레임의 닫기 버튼을 눌러 프로그램을 종료하기 위한 WindowEvent에 대한 이벤트 미처리
      >> JFrame.setDefaultCloseOperation(int option) : 종료옵션을 전달하여 닫기 버튼에 대한 동작을 변경하는 메소드 
     ※ 종료옵션에 대한 상수필드
        >> DO_NOTHING_ON_CLOSE : 아무런 동작도 실행되지 않는 옵션
        >> HIDE_ON_CLOSE : 프레임을 숨기는 옵션(기본)
        >> DISPOSE_ON_CLOSE : 메모리를 정리하고 프로그램 종료 옵션
        >> EXIT_ON_CLOSE : 프로그램을 강제 종료하는 옵션

● paint() 메소드
   - 컨테이너(프레임, 다이얼로그) 출력을 위해 자동 호출하는 메소드
   - paint() 메소드가 자동 호출되는 경우
     1) GUI 프로그램이 실행 될때
     2) 데미지를 입은 영역을 복구할 때 
       >> 컨테이너가 활성화될 경우 또는 컨테이너의 크기가 변경될 경우
   - repaint() 메소드 : update() 메소드를 호출하는 메소드
     >> Window.update(Graphics g) : 화면을 초기화(Clear)한 후 paint() 메소드를 호출하는 메소드
   ※ 화면을 초기화 시키지 않을 경우 update() 메소드 오버라이드 선언하여 paint() 메소드를 직접 호출
   - Swing 컨테이너는 repaint() 메소드가 paint() 메소드를 직접 호출
     >> repaint() 메소드를 호출해도 화면 초기화 미발생 - 개발자가 직접 화면 초기화
   ※ Swing 컨테이너의 update() 메소드는 초기화 작업 미구현

● java.io 패키지
  - 입출력 기능을 제공하기 위한 참조형이 선언된 패키지
  - Java 입출력의 특징 : Stream - 시냇물이 흐르는 모양
    >> 입력 스트림 또는 출력 스트림만 가능(입출력 스트림 미존재)
    >> 데이타의 순차 처리
    >> 스트림의 다단계 연결(스트림 전달을 이용한 포함 관계 설정) - 기능 확장
  
  - 입력(수신) 장치 : 키보드, 네트워크(Socket 통신을 이용한 입력), 파일(Load)등
    출력(발신) 장치 : 모니터, 네트워크(Socket 통신을 이용한 출력), 파일(Save)등 
  
  - 입력스트림 또는 출력스트림 클래스의 구분
    1) Byte Stream - InputStream 클래스와 OutputStream 클래스
      >> 원시데이타(1byte)를 처리하는 입력 및 출력 기능을 제공
      >> FileInputStream, BufferedInputStream, DataInputStream, ObjectInputStream등
      >> PrintStream, FileOutputStream, BufferedOutputStream, DataOutputStream, ObjectOutputStream등  
    2) Character Stream - Reader 클래스와 Writer 클래스
      >> 변형(문자)데이타로 처리하는 입력 또는 출력 기능 제공
      >> InputStreamReader, FileReader, BufferedReader 등
      >> OutputStreamWriter, PrintWriter, FileWriter, BufferedWriter 등  
   ※ File 클래스 : 파일정보를 저장하기 위한 클래스
      >> 파일 입출력 프로그램에 필요한 클래스

● java.net 패키지 
  - 네트워크 기능을 제공하기 위한 참조형이 선언된 패키지
  - InetAddress 클래스 : IP 관련 정보를 저장하기 위한 클래스
  - TCP 기반의 네트워크 프로그램 : ServerSocket 클래스와 Socket 클래스
  - UDP 기반의 네트워크 프로그램 : DatagramPacket 클래스와 DatagramSocket 클래스 이용