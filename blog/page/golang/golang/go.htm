## hello world
<code>
package main

import "fmt"

func main() {
  fmt.Println("hello world")
}
</code>

## golang 설치
  # linux
<code>
$ sudo apt update && sudo apt upgrade -y
$ sudo add-apt-repository ppa:gophers/archive
$ sudo apt update
$ sudo apt install golang-1.14.1 -y 
</code>

<code>
$ sudo apt update && sudo apt upgrade -y 
$ sudo apt install golang
</code>

<code>
$ wget -c https://golang.org/dl/go1.14.4.src.tar.gz -O - | sudo tar -xz -C /usr/local
$ export PATH=$PATH:/usr/local/go/bin  # ~/.profile 
$ source ~/.profile
</code>

  # package 설치
<code>
$ wget https://dl.googl.com/go/go{version}.linux-amd64.tar.gz
$ tar -zxvf go{version}.lnux-amd64.tar.gz -C /usr/local
  * -C : 압축을 풀 디렉토리를 지정합니다.
$ export PATH=$PATH:/usr/local/go/bin
</code>


## go 명령어
<code>
$ go version : go 버전 확인
$ go env : go 환경 설정 내용 보기
$ go build [.go파일]: 소스 파일 자체의 정보만을 사용하여 Go 바이너리를 빌드한다. 별도의 makefile은 없다.
$ go test: 유닛 테스트 및 마이크로벤치마크
$ go fmt: 코드 서식 지정
$ go get: 원격 패키지의 검색 및 설치
$ go vet: 코드 내의 잠재적인 오류를 찾아내는 정적 분석기
$ go run [.go파일]: 코드를 빌드하고 실행하는 바로 가기
$ godoc: 문서를 표시. HTTP를 통해 문서 확인.
$ gorename: 변수, 함수 등을 형 안전(type-safe) 방식으로 이름 변경
$ go generate: 코드 생성기를 호출하는 표준 방식
</code>