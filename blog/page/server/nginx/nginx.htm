## Nginx
  * 만든사람 : Igor Sysoev(러시아) 개발자
  * 동시접속 처리에 특화된 웹 서버 프로그램
  * 동시접속(약 700명) 이상이라면 서버를 증설 또는 Nginx 환경을 권장

  # 버전
    * 안정버전(stable version) : 권장
    * 개발버전(development version)
    * 레거시버전(legacy version)

## 역할
  # 정적 파일을 처리하는 HTTP 서버

  # 응용프로그램 서버에 요청을 보내는 리버스 프록시
    * 클라이언트는 가짜 서버에 요청
      > 프록시 서버(nginx)가 리버스 서버(Webapp등)로부터 데이터를 가져옴

## nginx.conf 파일에서 location 지시어를 사용하여 요청 배분


## 설치 / 제거
  # ubuntu apt 설치 (/etc/nginx)
<code>
// 설치 
$ sudo apt install nginx
// 제거
$ sudo apt remove nginx
// 버전확인
$ nginx -v
</code>

  # compile 설치 (/usr/local/nginx/coinf 또는 /usr/local/etc/nginx) : 설치 다시 해보기.. 20201208 실패..
    * NGINX의 확장 기능인 모듈을 이용하기위해 컴파일
  >> gninx 다운로드 
<code>
$ wget http://nginx.org/download/nginx-[버전].tar.gz
$ tar -xvf nginx-[버전].tar.gz
$ wget http://nginx.org/download/nginx-1.6.2.tar.gz
$ tar -xvf nginx-1.6.2.tar.gz
</code>
  >> 의존성 설치 (apt, yum으로 설치 가능)
<code>
// PCRE : NGINX는 Perl5에서 사용하는 정규표현식 라이브러리인 PCRE를 사용	
// ftp://ftp.pcre.org/pub/pcre/에서 버전 확인
$ wget ftp://ftp.pcre.org/pub/pcre/pcre-8.32.tar.gz
$ tar xvf pcre-8.32.tar.gz

// openssl : https 모듈인 HttpSslModule을 사용하기 위해서는 openssl이 필요 
$ wget http://www.openssl.org/source/openssl-1.0.1e.tar.gz
$ tar -xzvf openssl-1.0.1e.tar.gz

// zlib : ngx_http_gzip_module 모듈을 사용하기 위해서는 zlib 라이브러리가 있어야 함
// https://zlib.net 에서 최신 버전 확인
$ wget https://zlib.net/zlib1211.zip
$ unzip zlib1211.zip
</code>

  >> 워커유저 (다른 작업의 권한 는 유저) 생성
<code>
// linux
$ useradd --shell /sbin/nologin www-data

// unbuntu
$ useradd --shell /usr/sbin/nologin www-data
</code>

  >> 컴파일러 설치 (c, c++)
    * gcc 설치
<code>
$ sudo apt install gcc g++
$ yum install gcc g++
</code>

  >> nginx 설치 / 컴파일
    * 1단계 : configure (환경설정)
<code>
$ sudo .configure --help
</code>
<code>
// 예시 (모듈 x)
$ sudo ./configure --with-zlib=../zlib-1.2.11 --with-pcre=../pcre-8.32 --with-openssl=../openssl-1.0.1e --with-http_ssl_module --with-debug --prefix=/usr/local/nginx --user=www-data --group=www-data
// 예시 (모듈 o)
$ sudo ./configure --with-zlib=../zlib-1.2.11 --with-pcre=../pcre-8.32 --with-openssl=../openssl-1.0.1e --with-http_ssl_module --with-debug --add-module=../echo-nginx-module-0.45 --prefix=/usr/local/nginx --user=www-data --group=www-data
/* options
--with-(zlib | pcre | openssl) : NGINX가 의존하고 있는 라이브러리들의 소스 경로
--with-(http_ssl_module | debug) : NGINX를 설치할 때 ssl, debug 모듈을 활성화한다. 이 모듈들은 NGINX가 제공하는 내부 모듈이지만 기본적으로는 설치가 되지 않는 옵션사항이다. 
--add-module : 외부 모듈인 echo 모듈의 소스가 위치하는 디렉토리
--prefix : NGINX가 설치될 기본 디렉토리를 의미한다. 이 디렉토리 하위에 NGINX의 실행, 로깅, 설정 파일들이 설치된다. 각각의 항목을 바꿀 수도 있다. 메뉴얼을 참고하자. 
--user, --gourp : www-data 사용자의 권한으로 NGXIN를 실행시킨다. www-data 사용자가 없다면 만들어야 한다. 사용자의 리스트는 아래의 명령을 통해서 알 수 있다. www-data가 아니라 자기 자신의 계정을 사용해도 된다. 
*/
</code>
    * 2단계 : make (설치파일 컴파일) : 시간 소요
<code>
$ sudo make
$ sudo apt install make
</code>
    * 3단계 : make install (설치파일을 이용하여 설치)
<code>
$ sudo make install
</code>

  >> 모듈
    * echo module : echo 모듈은 html 파일이나 에플리케이션(php, python) 없이 NGXIN의 설정만으로 페이지를 만들 수 있는 기능
<code>
$ wget https://github.com/agentzh/echo-nginx-module/archive/v0.45.zip
$ unzip v0.45.zip
</code>

  >> nginx INIT
  * service nginx start : 시작 
  * service nginx stop : 정지
  * service nginx restart : 재시작
  * service nginx reload : 설정파일을 재로드
  * service nginx status : 현재 상태 
<code>
$ sudo wget https://raw.github.com/JasonGiedymin/nginx-init-ubuntu/master/nginx -O /etc/init.d/nginx
$ sudo chmod +x /etc/init.d/nginx
</code>

## nginx 파일 구조
  * /etc/nginx: 해당 디렉터리는 Nginx를 설정하는 디렉터리입니다.모든 설정을 이 디렉터리 안에서 합니다.
  * /etc/nginx/nginx.conf: Ngnix의 메인 설정 파일로 Nginx의 글로벌 설정을 수정 할 수 있습니다.
  * /etc/nginx/sites-available: 해당 디렉터리에서 프록시 설정 및 어떻게 요청을 처리해야 할지에 대해 설정 할 수 있습니다.
  * /etc/nginx/sites-enabled: 해당 디렉터리는 sites-available 디렉터리에서 연결된 파일들이 존재하는 곳 입니다.이 곳에 디렉터리와 연결이 되어 있어야 nginx가 프록시 설정을 적용합니다.
  * /etc/nginx/snippets: sites-available 디렉터리에 있는 파일들에 공통적으로 포함될 수 있는 설정들을 정의할 수 있는 디렉터리 입니다.


## nginx.conf 파일
  * nginx는 master와 worker 프로세스로 나뉨
  # user : nginx 프로세스가 실행되는 권한 (worker 프로세스의 권한 지정)
    >> www-data(default)
    >> nginx : worker process
  
  # 포트 설정
    * 정상 설정 안될 경우 /etc/nginx/sites-enabled/default 파일 server 설정 확인
    server {
      listen [포트 번호];
    }